
Servo_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002772  00002806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  0080015c  0080015c  00002862  2**0
                  ALLOC
  3 .debug_aranges 00000770  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001300  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000862a  00000000  00000000  000042d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b7e  00000000  00000000  0000c8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004c5c  00000000  00000000  0000e47a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d40  00000000  00000000  000130d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002131  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000510b  00000000  00000000  00015f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006f8  00000000  00000000  0001b054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  if( ServoCount < MAX_SERVOS) {
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
       0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
  command(LCD_ENTRYMODESET | _displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_11>
      30:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_16>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_18>
      4c:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_19>
      50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x4e>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <port_to_mode_PGM>:
      ea:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f4 <port_to_output_PGM>:
      f4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fe <port_to_input_PGM>:
      fe:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000108 <digital_pin_to_port_PGM>:
     108:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     118:	03 03 03 03                                         ....

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     12c:	04 08 10 20                                         ... 

00000130 <digital_pin_to_timer_PGM>:
     130:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     140:	00 00 00 00                                         ....

00000144 <__ctors_start>:
     144:	cb 04       	cpc	r12, r11
     146:	f7 0b       	sbc	r31, r23

00000148 <__ctors_end>:
     148:	11 24       	eor	r1, r1
     14a:	1f be       	out	0x3f, r1	; 63
     14c:	cf ef       	ldi	r28, 0xFF	; 255
     14e:	d8 e0       	ldi	r29, 0x08	; 8
     150:	de bf       	out	0x3e, r29	; 62
     152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	e2 e7       	ldi	r30, 0x72	; 114
     15c:	f7 e2       	ldi	r31, 0x27	; 39
     15e:	02 c0       	rjmp	.+4      	; 0x164 <.do_copy_data_start>

00000160 <.do_copy_data_loop>:
     160:	05 90       	lpm	r0, Z+
     162:	0d 92       	st	X+, r0

00000164 <.do_copy_data_start>:
     164:	ac 35       	cpi	r26, 0x5C	; 92
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <.do_copy_data_loop>

0000016a <__do_clear_bss>:
     16a:	12 e0       	ldi	r17, 0x02	; 2
     16c:	ac e5       	ldi	r26, 0x5C	; 92
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a9 36       	cpi	r26, 0x69	; 105
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>

0000017a <__do_global_ctors>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	c8 e4       	ldi	r28, 0x48	; 72
     17e:	d1 e0       	ldi	r29, 0x01	; 1
     180:	04 c0       	rjmp	.+8      	; 0x18a <.do_global_ctors_start>

00000182 <.do_global_ctors_loop>:
     182:	22 97       	sbiw	r28, 0x02	; 2
     184:	fe 01       	movw	r30, r28
     186:	0e 94 b3 13 	call	0x2766	; 0x2766 <__tablejump__>

0000018a <.do_global_ctors_start>:
     18a:	c4 34       	cpi	r28, 0x44	; 68
     18c:	d1 07       	cpc	r29, r17
     18e:	c9 f7       	brne	.-14     	; 0x182 <.do_global_ctors_loop>
     190:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <main>
     194:	0c 94 b7 13 	jmp	0x276e	; 0x276e <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
     19c:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
     19e:	80 91 5c 01 	lds	r24, 0x015C
     1a2:	8c 30       	cpi	r24, 0x0C	; 12
     1a4:	90 f4       	brcc	.+36     	; 0x1ca <_ZN5ServoC1Ev+0x2e>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
     1a6:	80 83       	st	Z, r24
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	80 93 5c 01 	sts	0x015C, r24
     1ae:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	fc 01       	movw	r30, r24
     1b4:	ee 0f       	add	r30, r30
     1b6:	ff 1f       	adc	r31, r31
     1b8:	e8 0f       	add	r30, r24
     1ba:	f9 1f       	adc	r31, r25
     1bc:	e3 5a       	subi	r30, 0xA3	; 163
     1be:	fe 4f       	sbci	r31, 0xFE	; 254
     1c0:	88 eb       	ldi	r24, 0xB8	; 184
     1c2:	9b e0       	ldi	r25, 0x0B	; 11
     1c4:	92 83       	std	Z+2, r25	; 0x02
     1c6:	81 83       	std	Z+1, r24	; 0x01
     1c8:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
     1ca:	8f ef       	ldi	r24, 0xFF	; 255
     1cc:	80 83       	st	Z, r24
     1ce:	08 95       	ret

000001d0 <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
     1d0:	fc 01       	movw	r30, r24
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     1d2:	20 81       	ld	r18, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     1d4:	2c 30       	cpi	r18, 0x0C	; 12
     1d6:	08 f0       	brcs	.+2      	; 0x1da <_ZN5Servo17writeMicrosecondsEi+0xa>
     1d8:	41 c0       	rjmp	.+130    	; 0x25c <_ZN5Servo17writeMicrosecondsEi+0x8c>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     1da:	81 81       	ldd	r24, Z+1	; 0x01
     1dc:	99 27       	eor	r25, r25
     1de:	87 fd       	sbrc	r24, 7
     1e0:	90 95       	com	r25
     1e2:	48 e8       	ldi	r20, 0x88	; 136
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	48 1b       	sub	r20, r24
     1e8:	59 0b       	sbc	r21, r25
     1ea:	44 0f       	add	r20, r20
     1ec:	55 1f       	adc	r21, r21
     1ee:	44 0f       	add	r20, r20
     1f0:	55 1f       	adc	r21, r21
     1f2:	64 17       	cp	r22, r20
     1f4:	75 07       	cpc	r23, r21
     1f6:	84 f0       	brlt	.+32     	; 0x218 <_ZN5Servo17writeMicrosecondsEi+0x48>
     1f8:	82 81       	ldd	r24, Z+2	; 0x02
     1fa:	99 27       	eor	r25, r25
     1fc:	87 fd       	sbrc	r24, 7
     1fe:	90 95       	com	r25
     200:	48 e5       	ldi	r20, 0x58	; 88
     202:	52 e0       	ldi	r21, 0x02	; 2
     204:	48 1b       	sub	r20, r24
     206:	59 0b       	sbc	r21, r25
     208:	44 0f       	add	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	44 0f       	add	r20, r20
     20e:	55 1f       	adc	r21, r21
     210:	64 17       	cp	r22, r20
     212:	75 07       	cpc	r23, r21
     214:	0c f4       	brge	.+2      	; 0x218 <_ZN5Servo17writeMicrosecondsEi+0x48>
     216:	ab 01       	movw	r20, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     218:	42 50       	subi	r20, 0x02	; 2
     21a:	50 40       	sbci	r21, 0x00	; 0
     21c:	ca 01       	movw	r24, r20
     21e:	aa 27       	eor	r26, r26
     220:	97 fd       	sbrc	r25, 7
     222:	a0 95       	com	r26
     224:	ba 2f       	mov	r27, r26
     226:	74 e0       	ldi	r23, 0x04	; 4
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	aa 1f       	adc	r26, r26
     22e:	bb 1f       	adc	r27, r27
     230:	7a 95       	dec	r23
     232:	d1 f7       	brne	.-12     	; 0x228 <_ZN5Servo17writeMicrosecondsEi+0x58>
     234:	63 e0       	ldi	r22, 0x03	; 3
     236:	b6 95       	lsr	r27
     238:	a7 95       	ror	r26
     23a:	97 95       	ror	r25
     23c:	87 95       	ror	r24
     23e:	6a 95       	dec	r22
     240:	d1 f7       	brne	.-12     	; 0x236 <_ZN5Servo17writeMicrosecondsEi+0x66>

    uint8_t oldSREG = SREG;
     242:	4f b7       	in	r20, 0x3f	; 63
    cli();
     244:	f8 94       	cli
    servos[channel].ticks = value;  
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	ee 0f       	add	r30, r30
     24c:	ff 1f       	adc	r31, r31
     24e:	e2 0f       	add	r30, r18
     250:	f3 1f       	adc	r31, r19
     252:	e3 5a       	subi	r30, 0xA3	; 163
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	92 83       	std	Z+2, r25	; 0x02
     258:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
     25a:	4f bf       	out	0x3f, r20	; 63
     25c:	08 95       	ret

0000025e <_ZN5Servo5writeEi>:
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
     274:	9b 01       	movw	r18, r22
{  
  if(value < MIN_PULSE_WIDTH)
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	60 32       	cpi	r22, 0x20	; 32
     27a:	78 07       	cpc	r23, r24
     27c:	0c f0       	brlt	.+2      	; 0x280 <_ZN5Servo5writeEi+0x22>
     27e:	48 c0       	rjmp	.+144    	; 0x310 <_ZN5Servo5writeEi+0xb2>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     280:	77 ff       	sbrs	r23, 7
     282:	03 c0       	rjmp	.+6      	; 0x28a <_ZN5Servo5writeEi+0x2c>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	05 c0       	rjmp	.+10     	; 0x294 <_ZN5Servo5writeEi+0x36>
    if(value > 180) value = 180;
     28a:	65 3b       	cpi	r22, 0xB5	; 181
     28c:	71 05       	cpc	r23, r1
     28e:	14 f0       	brlt	.+4      	; 0x294 <_ZN5Servo5writeEi+0x36>
     290:	24 eb       	ldi	r18, 0xB4	; 180
     292:	30 e0       	ldi	r19, 0x00	; 0
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
     294:	00 d0       	rcall	.+0      	; 0x296 <_ZN5Servo5writeEi+0x38>
     296:	00 d0       	rcall	.+0      	; 0x298 <_ZN5Servo5writeEi+0x3a>
     298:	b9 01       	movw	r22, r18
     29a:	88 27       	eor	r24, r24
     29c:	77 fd       	sbrc	r23, 7
     29e:	80 95       	com	r24
     2a0:	98 2f       	mov	r25, r24
     2a2:	29 81       	ldd	r18, Y+1	; 0x01
     2a4:	33 27       	eor	r19, r19
     2a6:	27 fd       	sbrc	r18, 7
     2a8:	30 95       	com	r19
     2aa:	e8 e8       	ldi	r30, 0x88	; 136
     2ac:	ae 2e       	mov	r10, r30
     2ae:	b1 2c       	mov	r11, r1
     2b0:	a2 1a       	sub	r10, r18
     2b2:	b3 0a       	sbc	r11, r19
     2b4:	aa 0c       	add	r10, r10
     2b6:	bb 1c       	adc	r11, r11
     2b8:	aa 0c       	add	r10, r10
     2ba:	bb 1c       	adc	r11, r11
     2bc:	cc 24       	eor	r12, r12
     2be:	b7 fc       	sbrc	r11, 7
     2c0:	c0 94       	com	r12
     2c2:	dc 2c       	mov	r13, r12
     2c4:	ea 81       	ldd	r30, Y+2	; 0x02
     2c6:	ff 27       	eor	r31, r31
     2c8:	e7 fd       	sbrc	r30, 7
     2ca:	f0 95       	com	r31
     2cc:	28 e5       	ldi	r18, 0x58	; 88
     2ce:	32 e0       	ldi	r19, 0x02	; 2
     2d0:	2e 1b       	sub	r18, r30
     2d2:	3f 0b       	sbc	r19, r31
     2d4:	22 0f       	add	r18, r18
     2d6:	33 1f       	adc	r19, r19
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	44 27       	eor	r20, r20
     2de:	37 fd       	sbrc	r19, 7
     2e0:	40 95       	com	r20
     2e2:	54 2f       	mov	r21, r20
     2e4:	ed b7       	in	r30, 0x3d	; 61
     2e6:	fe b7       	in	r31, 0x3e	; 62
     2e8:	21 83       	std	Z+1, r18	; 0x01
     2ea:	32 83       	std	Z+2, r19	; 0x02
     2ec:	43 83       	std	Z+3, r20	; 0x03
     2ee:	54 83       	std	Z+4, r21	; 0x04
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	04 eb       	ldi	r16, 0xB4	; 180
     2fa:	e0 2e       	mov	r14, r16
     2fc:	f1 2c       	mov	r15, r1
     2fe:	01 2d       	mov	r16, r1
     300:	11 2d       	mov	r17, r1
     302:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <_Z3maplllll>
     306:	9b 01       	movw	r18, r22
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
     310:	ce 01       	movw	r24, r28
     312:	b9 01       	movw	r22, r18
     314:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_ZN5Servo17writeMicrosecondsEi>
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	08 95       	ret

0000032e <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	ec 01       	movw	r28, r24
     33e:	16 2f       	mov	r17, r22
     340:	7a 01       	movw	r14, r20
     342:	69 01       	movw	r12, r18
{
  if(this->servoIndex < MAX_SERVOS ) {
     344:	88 81       	ld	r24, Y
     346:	8c 30       	cpi	r24, 0x0C	; 12
     348:	08 f0       	brcs	.+2      	; 0x34c <_ZN5Servo6attachEiii+0x1e>
     34a:	64 c0       	rjmp	.+200    	; 0x414 <_ZN5Servo6attachEiii+0xe6>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     34c:	86 2f       	mov	r24, r22
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
     354:	88 81       	ld	r24, Y
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	fc 01       	movw	r30, r24
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e8 0f       	add	r30, r24
     360:	f9 1f       	adc	r31, r25
     362:	e3 5a       	subi	r30, 0xA3	; 163
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	1f 73       	andi	r17, 0x3F	; 63
     368:	80 81       	ld	r24, Z
     36a:	80 7c       	andi	r24, 0xC0	; 192
     36c:	81 2b       	or	r24, r17
     36e:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
     370:	80 e2       	ldi	r24, 0x20	; 32
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	8e 19       	sub	r24, r14
     376:	9f 09       	sbc	r25, r15
     378:	64 e0       	ldi	r22, 0x04	; 4
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	0e 94 4d 13 	call	0x269a	; 0x269a <__divmodhi4>
     380:	69 83       	std	Y+1, r22	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
     382:	80 e6       	ldi	r24, 0x60	; 96
     384:	99 e0       	ldi	r25, 0x09	; 9
     386:	8c 19       	sub	r24, r12
     388:	9d 09       	sbc	r25, r13
     38a:	64 e0       	ldi	r22, 0x04	; 4
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 4d 13 	call	0x269a	; 0x269a <__divmodhi4>
     392:	6a 83       	std	Y+2, r22	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     394:	a8 81       	ld	r26, Y
     396:	8a 2f       	mov	r24, r26
     398:	6c e0       	ldi	r22, 0x0C	; 12
     39a:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodqi4>
     39e:	68 2f       	mov	r22, r24
     3a0:	70 e0       	ldi	r23, 0x00	; 0

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     3a2:	ab 01       	movw	r20, r22
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	46 0f       	add	r20, r22
     3aa:	57 1f       	adc	r21, r23
     3ac:	44 0f       	add	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	c9 01       	movw	r24, r18
     3ba:	84 0f       	add	r24, r20
     3bc:	95 1f       	adc	r25, r21
     3be:	fc 01       	movw	r30, r24
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	e8 0f       	add	r30, r24
     3c6:	f9 1f       	adc	r31, r25
     3c8:	e3 5a       	subi	r30, 0xA3	; 163
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	80 81       	ld	r24, Z
     3ce:	86 fd       	sbrc	r24, 6
     3d0:	15 c0       	rjmp	.+42     	; 0x3fc <_ZN5Servo6attachEiii+0xce>
     3d2:	2f 5f       	subi	r18, 0xFF	; 255
     3d4:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     3d6:	2c 30       	cpi	r18, 0x0C	; 12
     3d8:	31 05       	cpc	r19, r1
     3da:	71 f7       	brne	.-36     	; 0x3b8 <_ZN5Servo6attachEiii+0x8a>
     3dc:	24 c0       	rjmp	.+72     	; 0x426 <_ZN5Servo6attachEiii+0xf8>

static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    TCCR1A = 0;             // normal counting mode 
     3de:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
     3e8:	10 92 85 00 	sts	0x0085, r1
     3ec:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
     3f0:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
     3f2:	80 91 6f 00 	lds	r24, 0x006F
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	80 93 6f 00 	sts	0x006F, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     3fc:	8a 2f       	mov	r24, r26
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	fc 01       	movw	r30, r24
     402:	ee 0f       	add	r30, r30
     404:	ff 1f       	adc	r31, r31
     406:	e8 0f       	add	r30, r24
     408:	f9 1f       	adc	r31, r25
     40a:	e3 5a       	subi	r30, 0xA3	; 163
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	80 81       	ld	r24, Z
     410:	80 64       	ori	r24, 0x40	; 64
     412:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
     414:	88 81       	ld	r24, Y
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	08 95       	ret


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
     426:	67 2b       	or	r22, r23
     428:	d1 f2       	breq	.-76     	; 0x3de <_ZN5Servo6attachEiii+0xb0>
     42a:	e8 cf       	rjmp	.-48     	; 0x3fc <_ZN5Servo6attachEiii+0xce>

0000042c <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
     42c:	40 e2       	ldi	r20, 0x20	; 32
     42e:	52 e0       	ldi	r21, 0x02	; 2
     430:	20 e6       	ldi	r18, 0x60	; 96
     432:	39 e0       	ldi	r19, 0x09	; 9
     434:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN5Servo6attachEiii>
}
     438:	08 95       	ret

0000043a <__vector_11>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	2f 93       	push	r18
     446:	3f 93       	push	r19
     448:	4f 93       	push	r20
     44a:	5f 93       	push	r21
     44c:	6f 93       	push	r22
     44e:	7f 93       	push	r23
     450:	8f 93       	push	r24
     452:	9f 93       	push	r25
     454:	af 93       	push	r26
     456:	bf 93       	push	r27
     458:	ef 93       	push	r30
     45a:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     45c:	80 91 81 01 	lds	r24, 0x0181
     460:	87 ff       	sbrs	r24, 7
     462:	05 c0       	rjmp	.+10     	; 0x46e <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     464:	10 92 85 00 	sts	0x0085, r1
     468:	10 92 84 00 	sts	0x0084, r1
     46c:	2b c0       	rjmp	.+86     	; 0x4c4 <__vector_11+0x8a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     46e:	20 91 81 01 	lds	r18, 0x0181
     472:	33 27       	eor	r19, r19
     474:	27 fd       	sbrc	r18, 7
     476:	30 95       	com	r19
     478:	80 91 5c 01 	lds	r24, 0x015C
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	04 f5       	brge	.+64     	; 0x4c4 <__vector_11+0x8a>
     484:	80 91 81 01 	lds	r24, 0x0181
     488:	99 27       	eor	r25, r25
     48a:	87 fd       	sbrc	r24, 7
     48c:	90 95       	com	r25
     48e:	fc 01       	movw	r30, r24
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	e8 0f       	add	r30, r24
     496:	f9 1f       	adc	r31, r25
     498:	e3 5a       	subi	r30, 0xA3	; 163
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	80 81       	ld	r24, Z
     49e:	86 ff       	sbrs	r24, 6
     4a0:	11 c0       	rjmp	.+34     	; 0x4c4 <__vector_11+0x8a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     4a2:	80 91 81 01 	lds	r24, 0x0181
     4a6:	99 27       	eor	r25, r25
     4a8:	87 fd       	sbrc	r24, 7
     4aa:	90 95       	com	r25
     4ac:	fc 01       	movw	r30, r24
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e8 0f       	add	r30, r24
     4b4:	f9 1f       	adc	r31, r25
     4b6:	e3 5a       	subi	r30, 0xA3	; 163
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	80 81       	ld	r24, Z
     4bc:	8f 73       	andi	r24, 0x3F	; 63
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     4c4:	80 91 81 01 	lds	r24, 0x0181
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
     4ca:	80 93 81 01 	sts	0x0181, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     4ce:	20 91 81 01 	lds	r18, 0x0181
     4d2:	33 27       	eor	r19, r19
     4d4:	27 fd       	sbrc	r18, 7
     4d6:	30 95       	com	r19
     4d8:	80 91 5c 01 	lds	r24, 0x015C
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	28 17       	cp	r18, r24
     4e0:	39 07       	cpc	r19, r25
     4e2:	0c f0       	brlt	.+2      	; 0x4e6 <__vector_11+0xac>
     4e4:	4e c0       	rjmp	.+156    	; 0x582 <__vector_11+0x148>
     4e6:	80 91 81 01 	lds	r24, 0x0181
     4ea:	8c 30       	cpi	r24, 0x0C	; 12
     4ec:	0c f0       	brlt	.+2      	; 0x4f0 <__vector_11+0xb6>
     4ee:	49 c0       	rjmp	.+146    	; 0x582 <__vector_11+0x148>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     4f0:	20 91 84 00 	lds	r18, 0x0084
     4f4:	30 91 85 00 	lds	r19, 0x0085
     4f8:	80 91 81 01 	lds	r24, 0x0181
     4fc:	99 27       	eor	r25, r25
     4fe:	87 fd       	sbrc	r24, 7
     500:	90 95       	com	r25
     502:	fc 01       	movw	r30, r24
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	e8 0f       	add	r30, r24
     50a:	f9 1f       	adc	r31, r25
     50c:	e3 5a       	subi	r30, 0xA3	; 163
     50e:	fe 4f       	sbci	r31, 0xFE	; 254
     510:	81 81       	ldd	r24, Z+1	; 0x01
     512:	92 81       	ldd	r25, Z+2	; 0x02
     514:	28 0f       	add	r18, r24
     516:	39 1f       	adc	r19, r25
     518:	30 93 89 00 	sts	0x0089, r19
     51c:	20 93 88 00 	sts	0x0088, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     520:	80 91 81 01 	lds	r24, 0x0181
     524:	99 27       	eor	r25, r25
     526:	87 fd       	sbrc	r24, 7
     528:	90 95       	com	r25
     52a:	fc 01       	movw	r30, r24
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	e8 0f       	add	r30, r24
     532:	f9 1f       	adc	r31, r25
     534:	e3 5a       	subi	r30, 0xA3	; 163
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	80 81       	ld	r24, Z
     53a:	86 ff       	sbrs	r24, 6
     53c:	2b c0       	rjmp	.+86     	; 0x594 <__vector_11+0x15a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     53e:	80 91 81 01 	lds	r24, 0x0181
     542:	99 27       	eor	r25, r25
     544:	87 fd       	sbrc	r24, 7
     546:	90 95       	com	r25
     548:	fc 01       	movw	r30, r24
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e8 0f       	add	r30, r24
     550:	f9 1f       	adc	r31, r25
     552:	e3 5a       	subi	r30, 0xA3	; 163
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	80 81       	ld	r24, Z
     558:	8f 73       	andi	r24, 0x3F	; 63
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
     560:	19 c0       	rjmp	.+50     	; 0x594 <__vector_11+0x15a>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	9c e9       	ldi	r25, 0x9C	; 156
     566:	05 c0       	rjmp	.+10     	; 0x572 <__vector_11+0x138>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     568:	80 91 84 00 	lds	r24, 0x0084
     56c:	90 91 85 00 	lds	r25, 0x0085
     570:	04 96       	adiw	r24, 0x04	; 4
     572:	90 93 89 00 	sts	0x0089, r25
     576:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	80 93 81 01 	sts	0x0181, r24
     580:	09 c0       	rjmp	.+18     	; 0x594 <__vector_11+0x15a>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     582:	80 91 84 00 	lds	r24, 0x0084
     586:	90 91 85 00 	lds	r25, 0x0085
     58a:	04 96       	adiw	r24, 0x04	; 4
     58c:	80 54       	subi	r24, 0x40	; 64
     58e:	9c 49       	sbci	r25, 0x9C	; 156
     590:	40 f3       	brcs	.-48     	; 0x562 <__vector_11+0x128>
     592:	ea cf       	rjmp	.-44     	; 0x568 <__vector_11+0x12e>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	0f 90       	pop	r0
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	0f 90       	pop	r0
     5b2:	1f 90       	pop	r1
     5b4:	18 95       	reti

000005b6 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	8c 01       	movw	r16, r24
  digitalWrite(_enable_pin, LOW);
     5bc:	fc 01       	movw	r30, r24
     5be:	86 81       	ldd	r24, Z+6	; 0x06
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  delayMicroseconds(1);    
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
     5ce:	f8 01       	movw	r30, r16
     5d0:	86 81       	ldd	r24, Z+6	; 0x06
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
     5e0:	f8 01       	movw	r30, r16
     5e2:	86 81       	ldd	r24, Z+6	; 0x06
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
     5ea:	84 e6       	ldi	r24, 0x64	; 100
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
}
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <_ZN13LiquidCrystal10write8bitsEh>:
  }

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	d8 2e       	mov	r13, r24
     60a:	c9 2e       	mov	r12, r25
     60c:	28 2f       	mov	r18, r24
     60e:	39 2f       	mov	r19, r25
     610:	c9 01       	movw	r24, r18
     612:	8c 01       	movw	r16, r24
     614:	c0 e0       	ldi	r28, 0x00	; 0
     616:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     618:	e6 2e       	mov	r14, r22
     61a:	ff 24       	eor	r15, r15
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
     61c:	f8 01       	movw	r30, r16
     61e:	87 81       	ldd	r24, Z+7	; 0x07
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     626:	b7 01       	movw	r22, r14
     628:	0c 2e       	mov	r0, r28
     62a:	02 c0       	rjmp	.+4      	; 0x630 <_ZN13LiquidCrystal10write8bitsEh+0x38>
     62c:	75 95       	asr	r23
     62e:	67 95       	ror	r22
     630:	0a 94       	dec	r0
     632:	e2 f7       	brpl	.-8      	; 0x62c <_ZN13LiquidCrystal10write8bitsEh+0x34>
     634:	61 70       	andi	r22, 0x01	; 1
     636:	f8 01       	movw	r30, r16
     638:	87 81       	ldd	r24, Z+7	; 0x07
     63a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     63e:	21 96       	adiw	r28, 0x01	; 1
     640:	0f 5f       	subi	r16, 0xFF	; 255
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	c8 30       	cpi	r28, 0x08	; 8
     646:	d1 05       	cpc	r29, r1
     648:	49 f7       	brne	.-46     	; 0x61c <_ZN13LiquidCrystal10write8bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     64a:	8d 2d       	mov	r24, r13
     64c:	9c 2d       	mov	r25, r12
     64e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN13LiquidCrystal11pulseEnableEv>
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	08 95       	ret

00000664 <_ZN13LiquidCrystal10write4bitsEh>:
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	d8 2e       	mov	r13, r24
     676:	c9 2e       	mov	r12, r25
     678:	28 2f       	mov	r18, r24
     67a:	39 2f       	mov	r19, r25
     67c:	c9 01       	movw	r24, r18
     67e:	8c 01       	movw	r16, r24
     680:	c0 e0       	ldi	r28, 0x00	; 0
     682:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     684:	e6 2e       	mov	r14, r22
     686:	ff 24       	eor	r15, r15
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
     688:	f8 01       	movw	r30, r16
     68a:	87 81       	ldd	r24, Z+7	; 0x07
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     692:	b7 01       	movw	r22, r14
     694:	0c 2e       	mov	r0, r28
     696:	02 c0       	rjmp	.+4      	; 0x69c <_ZN13LiquidCrystal10write4bitsEh+0x38>
     698:	75 95       	asr	r23
     69a:	67 95       	ror	r22
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_ZN13LiquidCrystal10write4bitsEh+0x34>
     6a0:	61 70       	andi	r22, 0x01	; 1
     6a2:	f8 01       	movw	r30, r16
     6a4:	87 81       	ldd	r24, Z+7	; 0x07
     6a6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     6aa:	21 96       	adiw	r28, 0x01	; 1
     6ac:	0f 5f       	subi	r16, 0xFF	; 255
     6ae:	1f 4f       	sbci	r17, 0xFF	; 255
     6b0:	c4 30       	cpi	r28, 0x04	; 4
     6b2:	d1 05       	cpc	r29, r1
     6b4:	49 f7       	brne	.-46     	; 0x688 <_ZN13LiquidCrystal10write4bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     6b6:	8d 2d       	mov	r24, r13
     6b8:	9c 2d       	mov	r25, r12
     6ba:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN13LiquidCrystal11pulseEnableEv>
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	08 95       	ret

000006d0 <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
     6d8:	16 2f       	mov	r17, r22
  digitalWrite(_rs_pin, mode);
     6da:	8c 81       	ldd	r24, Y+4	; 0x04
     6dc:	64 2f       	mov	r22, r20
     6de:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     6e2:	8d 81       	ldd	r24, Y+5	; 0x05
     6e4:	8f 3f       	cpi	r24, 0xFF	; 255
     6e6:	19 f0       	breq	.+6      	; 0x6ee <_ZN13LiquidCrystal4sendEhh+0x1e>
    digitalWrite(_rw_pin, LOW);
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     6ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f0:	84 ff       	sbrs	r24, 4
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <_ZN13LiquidCrystal4sendEhh+0x2e>
    write8bits(value); 
     6f4:	ce 01       	movw	r24, r28
     6f6:	61 2f       	mov	r22, r17
     6f8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN13LiquidCrystal10write8bitsEh>
     6fc:	0e c0       	rjmp	.+28     	; 0x71a <_ZN13LiquidCrystal4sendEhh+0x4a>
  } else {
    write4bits(value>>4);
     6fe:	61 2f       	mov	r22, r17
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	75 95       	asr	r23
     706:	67 95       	ror	r22
     708:	8a 95       	dec	r24
     70a:	e1 f7       	brne	.-8      	; 0x704 <_ZN13LiquidCrystal4sendEhh+0x34>
     70c:	ce 01       	movw	r24, r28
     70e:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
     712:	ce 01       	movw	r24, r28
     714:	61 2f       	mov	r22, r17
     716:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
  }
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	08 95       	ret

00000722 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	08 95       	ret

0000072e <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN13LiquidCrystal4sendEhh>
}
     734:	08 95       	ret

00000736 <_ZN13LiquidCrystal7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
     736:	fc 01       	movw	r30, r24
  _displaycontrol |= LCD_DISPLAYON;
     738:	60 89       	ldd	r22, Z+16	; 0x10
     73a:	86 2f       	mov	r24, r22
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	80 8b       	std	Z+16, r24	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     740:	6c 60       	ori	r22, 0x0C	; 12
     742:	cf 01       	movw	r24, r30
     744:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
}
     748:	08 95       	ret

0000074a <_ZN13LiquidCrystal9setCursorEhh>:
{
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	28 97       	sbiw	r28, 0x08	; 8
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	9c 01       	movw	r18, r24
{
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     760:	fe 01       	movw	r30, r28
     762:	31 96       	adiw	r30, 0x01	; 1
     764:	a4 e4       	ldi	r26, 0x44	; 68
     766:	b1 e0       	ldi	r27, 0x01	; 1
     768:	88 e0       	ldi	r24, 0x08	; 8
     76a:	0d 90       	ld	r0, X+
     76c:	01 92       	st	Z+, r0
     76e:	81 50       	subi	r24, 0x01	; 1
     770:	e1 f7       	brne	.-8      	; 0x76a <_ZN13LiquidCrystal9setCursorEhh+0x20>
  if ( row >= _numlines ) {
     772:	f9 01       	movw	r30, r18
     774:	83 89       	ldd	r24, Z+19	; 0x13
     776:	48 17       	cp	r20, r24
     778:	10 f0       	brcs	.+4      	; 0x77e <_ZN13LiquidCrystal9setCursorEhh+0x34>
    row = _numlines-1;    // we count rows starting w/0
     77a:	48 2f       	mov	r20, r24
     77c:	41 50       	subi	r20, 0x01	; 1
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     77e:	e4 2f       	mov	r30, r20
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ec 0f       	add	r30, r28
     788:	fd 1f       	adc	r31, r29
     78a:	81 81       	ldd	r24, Z+1	; 0x01
     78c:	68 0f       	add	r22, r24
     78e:	60 68       	ori	r22, 0x80	; 128
     790:	c9 01       	movw	r24, r18
     792:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
}
     796:	28 96       	adiw	r28, 0x08	; 8
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <_ZN13LiquidCrystal5clearEv>:
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
     7ae:	80 ed       	ldi	r24, 0xD0	; 208
     7b0:	97 e0       	ldi	r25, 0x07	; 7
     7b2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
}
     7b6:	08 95       	ret

000007b8 <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
  if (lines > 1) {
     7be:	42 30       	cpi	r20, 0x02	; 2
     7c0:	18 f0       	brcs	.+6      	; 0x7c8 <_ZN13LiquidCrystal5beginEhhh+0x10>
    _displayfunction |= LCD_2LINE;
     7c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c4:	88 60       	ori	r24, 0x08	; 8
     7c6:	8f 87       	std	Y+15, r24	; 0x0f
  }
  _numlines = lines;
     7c8:	4b 8b       	std	Y+19, r20	; 0x13
  _currline = 0;
     7ca:	1c 8a       	std	Y+20, r1	; 0x14

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
     7cc:	22 23       	and	r18, r18
     7ce:	29 f0       	breq	.+10     	; 0x7da <_ZN13LiquidCrystal5beginEhhh+0x22>
     7d0:	41 30       	cpi	r20, 0x01	; 1
     7d2:	19 f4       	brne	.+6      	; 0x7da <_ZN13LiquidCrystal5beginEhhh+0x22>
    _displayfunction |= LCD_5x10DOTS;
     7d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d6:	84 60       	ori	r24, 0x04	; 4
     7d8:	8f 87       	std	Y+15, r24	; 0x0f
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     7da:	80 e5       	ldi	r24, 0x50	; 80
     7dc:	93 ec       	ldi	r25, 0xC3	; 195
     7de:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     7e2:	8c 81       	ldd	r24, Y+4	; 0x04
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  digitalWrite(_enable_pin, LOW);
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  if (_rw_pin != 255) { 
     7f2:	8d 81       	ldd	r24, Y+5	; 0x05
     7f4:	8f 3f       	cpi	r24, 0xFF	; 255
     7f6:	19 f0       	breq	.+6      	; 0x7fe <_ZN13LiquidCrystal5beginEhhh+0x46>
    digitalWrite(_rw_pin, LOW);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     7fe:	6f 85       	ldd	r22, Y+15	; 0x0f
     800:	64 fd       	sbrc	r22, 4
     802:	1d c0       	rjmp	.+58     	; 0x83e <_ZN13LiquidCrystal5beginEhhh+0x86>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     804:	ce 01       	movw	r24, r28
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
     80c:	84 e9       	ldi	r24, 0x94	; 148
     80e:	91 e1       	ldi	r25, 0x11	; 17
     810:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>

    // second try
    write4bits(0x03);
     814:	ce 01       	movw	r24, r28
     816:	63 e0       	ldi	r22, 0x03	; 3
     818:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
     81c:	84 e9       	ldi	r24, 0x94	; 148
     81e:	91 e1       	ldi	r25, 0x11	; 17
     820:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>
    
    // third go!
    write4bits(0x03); 
     824:	ce 01       	movw	r24, r28
     826:	63 e0       	ldi	r22, 0x03	; 3
     828:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(150);
     82c:	86 e9       	ldi	r24, 0x96	; 150
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>

    // finally, set to 4-bit interface
    write4bits(0x02); 
     834:	ce 01       	movw	r24, r28
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	0e 94 32 03 	call	0x664	; 0x664 <_ZN13LiquidCrystal10write4bitsEh>
     83c:	16 c0       	rjmp	.+44     	; 0x86a <_ZN13LiquidCrystal5beginEhhh+0xb2>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     83e:	60 62       	ori	r22, 0x20	; 32
     840:	ce 01       	movw	r24, r28
     842:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(4500);  // wait more than 4.1ms
     846:	84 e9       	ldi	r24, 0x94	; 148
     848:	91 e1       	ldi	r25, 0x11	; 17
     84a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     84e:	6f 85       	ldd	r22, Y+15	; 0x0f
     850:	60 62       	ori	r22, 0x20	; 32
     852:	ce 01       	movw	r24, r28
     854:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(150);
     858:	86 e9       	ldi	r24, 0x96	; 150
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <delayMicroseconds>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     860:	6f 85       	ldd	r22, Y+15	; 0x0f
     862:	60 62       	ori	r22, 0x20	; 32
     864:	ce 01       	movw	r24, r28
     866:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     86a:	6f 85       	ldd	r22, Y+15	; 0x0f
     86c:	60 62       	ori	r22, 0x20	; 32
     86e:	ce 01       	movw	r24, r28
     870:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     874:	84 e0       	ldi	r24, 0x04	; 4
     876:	88 8b       	std	Y+16, r24	; 0x10
  display();
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
     87e:	ce 01       	movw	r24, r28
     880:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	89 8b       	std	Y+17, r24	; 0x11
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     888:	ce 01       	movw	r24, r28
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN13LiquidCrystal7commandEh>

}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	af 92       	push	r10
     89e:	cf 92       	push	r12
     8a0:	ef 92       	push	r14
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	3c 01       	movw	r6, r24
     8b0:	16 2f       	mov	r17, r22
     8b2:	84 2f       	mov	r24, r20
{
  _rs_pin = rs;
     8b4:	f3 01       	movw	r30, r6
     8b6:	44 83       	std	Z+4, r20	; 0x04
  _rw_pin = rw;
     8b8:	25 83       	std	Z+5, r18	; 0x05
  _enable_pin = enable;
     8ba:	06 83       	std	Z+6, r16	; 0x06
  
  _data_pins[0] = d0;
     8bc:	e7 82       	std	Z+7, r14	; 0x07
  _data_pins[1] = d1;
     8be:	c0 86       	std	Z+8, r12	; 0x08
  _data_pins[2] = d2;
     8c0:	a1 86       	std	Z+9, r10	; 0x09
  _data_pins[3] = d3; 
     8c2:	82 86       	std	Z+10, r8	; 0x0a
  _data_pins[4] = d4;
     8c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c6:	93 87       	std	Z+11, r25	; 0x0b
  _data_pins[5] = d5;
     8c8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ca:	94 87       	std	Z+12, r25	; 0x0c
  _data_pins[6] = d6;
     8cc:	9f 85       	ldd	r25, Y+15	; 0x0f
     8ce:	95 87       	std	Z+13, r25	; 0x0d
  _data_pins[7] = d7; 
     8d0:	98 89       	ldd	r25, Y+16	; 0x10
     8d2:	96 87       	std	Z+14, r25	; 0x0e

  pinMode(_rs_pin, OUTPUT);
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     8da:	f3 01       	movw	r30, r6
     8dc:	85 81       	ldd	r24, Z+5	; 0x05
     8de:	8f 3f       	cpi	r24, 0xFF	; 255
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
    pinMode(_rw_pin, OUTPUT);
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
     8e8:	f3 01       	movw	r30, r6
     8ea:	86 81       	ldd	r24, Z+6	; 0x06
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>
  
  if (fourbitmode)
     8f2:	11 23       	and	r17, r17
     8f4:	19 f0       	breq	.+6      	; 0x8fc <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
     8f6:	f3 01       	movw	r30, r6
     8f8:	17 86       	std	Z+15, r1	; 0x0f
     8fa:	03 c0       	rjmp	.+6      	; 0x902 <__stack+0x3>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
     8fc:	80 e1       	ldi	r24, 0x10	; 16
     8fe:	f3 01       	movw	r30, r6
     900:	87 87       	std	Z+15, r24	; 0x0f
  
  begin(16, 1);  
     902:	c3 01       	movw	r24, r6
     904:	60 e1       	ldi	r22, 0x10	; 16
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN13LiquidCrystal5beginEhhh>
}
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ef 90       	pop	r14
     918:	cf 90       	pop	r12
     91a:	af 90       	pop	r10
     91c:	8f 90       	pop	r8
     91e:	7f 90       	pop	r7
     920:	6f 90       	pop	r6
     922:	08 95       	ret

00000924 <_ZN13LiquidCrystalC1Ehhhhhh>:
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
     924:	8f 92       	push	r8
     926:	af 92       	push	r10
     928:	cf 92       	push	r12
     92a:	ef 92       	push	r14
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	dc 01       	movw	r26, r24
     936:	36 2f       	mov	r19, r22
     938:	54 2f       	mov	r21, r20
     93a:	72 2f       	mov	r23, r18
     93c:	10 2f       	mov	r17, r16
     93e:	ae 2c       	mov	r10, r14
     940:	8c 2c       	mov	r8, r12
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     942:	13 96       	adiw	r26, 0x03	; 3
     944:	1c 92       	st	X, r1
     946:	1e 92       	st	-X, r1
     948:	12 97       	sbiw	r26, 0x02	; 2
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	9c 93       	st	X, r25
     952:	8e 93       	st	-X, r24
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
     954:	00 d0       	rcall	.+0      	; 0x956 <_ZN13LiquidCrystalC1Ehhhhhh+0x32>
     956:	00 d0       	rcall	.+0      	; 0x958 <_ZN13LiquidCrystalC1Ehhhhhh+0x34>
     958:	ed b7       	in	r30, 0x3d	; 61
     95a:	fe b7       	in	r31, 0x3e	; 62
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	19 82       	std	Y+1, r1	; 0x01
     964:	11 82       	std	Z+1, r1	; 0x01
     966:	12 82       	std	Z+2, r1	; 0x02
     968:	13 82       	std	Z+3, r1	; 0x03
     96a:	cd 01       	movw	r24, r26
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	43 2f       	mov	r20, r19
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	05 2f       	mov	r16, r21
     974:	e7 2e       	mov	r14, r23
     976:	c1 2e       	mov	r12, r17
     978:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ef 90       	pop	r14
     98e:	cf 90       	pop	r12
     990:	af 90       	pop	r10
     992:	8f 90       	pop	r8
     994:	08 95       	ret

00000996 <_GLOBAL__I_lcd>:
	  lcd.print(near < 10000 ? near : -1);
	  lcd.setCursor(12, 0);
	  lcd.print(rangeX);
	  lcd.setCursor(12, 1);
	  lcd.print(rangeY);
}
     996:	cf 92       	push	r12
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
// Do not remove the include below
#include "Servo_Test.h"

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
     9a0:	82 e8       	ldi	r24, 0x82	; 130
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	6c e0       	ldi	r22, 0x0C	; 12
     9a6:	4b e0       	ldi	r20, 0x0B	; 11
     9a8:	25 e0       	ldi	r18, 0x05	; 5
     9aa:	04 e0       	ldi	r16, 0x04	; 4
     9ac:	53 e0       	ldi	r21, 0x03	; 3
     9ae:	e5 2e       	mov	r14, r21
     9b0:	32 e0       	ldi	r19, 0x02	; 2
     9b2:	c3 2e       	mov	r12, r19
     9b4:	0e 94 92 04 	call	0x924	; 0x924 <_ZN13LiquidCrystalC1Ehhhhhh>

int sensorPin = A0;

Servo xServo;  // create servo object to control a servo
     9b8:	87 e9       	ldi	r24, 0x97	; 151
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN5ServoC1Ev>
                // a maximum of eight servo objects can be created
Servo yServo;  // create servo object to control a servo
     9c0:	8a e9       	ldi	r24, 0x9A	; 154
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN5ServoC1Ev>
int y = 0;
int loX = 30;
int hiX = 150;
int loY = 50;
int hiY = 100;
int minX = loX;
     9c8:	e0 91 2b 01 	lds	r30, 0x012B
     9cc:	f0 91 2c 01 	lds	r31, 0x012C
     9d0:	f0 93 a6 01 	sts	0x01A6, r31
     9d4:	e0 93 a5 01 	sts	0x01A5, r30
int minY = loY;
     9d8:	00 91 2f 01 	lds	r16, 0x012F
     9dc:	10 91 30 01 	lds	r17, 0x0130
     9e0:	10 93 a8 01 	sts	0x01A8, r17
     9e4:	00 93 a7 01 	sts	0x01A7, r16
int maxX = hiX;
     9e8:	80 91 2d 01 	lds	r24, 0x012D
     9ec:	90 91 2e 01 	lds	r25, 0x012E
     9f0:	90 93 aa 01 	sts	0x01AA, r25
     9f4:	80 93 a9 01 	sts	0x01A9, r24
int maxY = hiY;
     9f8:	e0 90 31 01 	lds	r14, 0x0131
     9fc:	f0 90 32 01 	lds	r15, 0x0132
     a00:	f0 92 ac 01 	sts	0x01AC, r15
     a04:	e0 92 ab 01 	sts	0x01AB, r14
int incrX = 1;
int incrY = 5;
int startX = (loX+hiX)/2;
     a08:	8e 0f       	add	r24, r30
     a0a:	9f 1f       	adc	r25, r31
     a0c:	62 e0       	ldi	r22, 0x02	; 2
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 4d 13 	call	0x269a	; 0x269a <__divmodhi4>
     a14:	9b 01       	movw	r18, r22
     a16:	70 93 ae 01 	sts	0x01AE, r23
     a1a:	60 93 ad 01 	sts	0x01AD, r22
int startY = (loY+hiY)/2;
     a1e:	c7 01       	movw	r24, r14
     a20:	80 0f       	add	r24, r16
     a22:	91 1f       	adc	r25, r17
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 4d 13 	call	0x269a	; 0x269a <__divmodhi4>
     a2c:	cb 01       	movw	r24, r22
     a2e:	70 93 b0 01 	sts	0x01B0, r23
     a32:	60 93 af 01 	sts	0x01AF, r22
int rangeX = startX - loX;
     a36:	2e 1b       	sub	r18, r30
     a38:	3f 0b       	sbc	r19, r31
     a3a:	30 93 b2 01 	sts	0x01B2, r19
     a3e:	20 93 b1 01 	sts	0x01B1, r18
int rangeY = startY - loY;
     a42:	80 1b       	sub	r24, r16
     a44:	91 0b       	sbc	r25, r17
     a46:	90 93 b4 01 	sts	0x01B4, r25
     a4a:	80 93 b3 01 	sts	0x01B3, r24
	  lcd.print(near < 10000 ? near : -1);
	  lcd.setCursor(12, 0);
	  lcd.print(rangeX);
	  lcd.setCursor(12, 1);
	  lcd.print(rangeY);
}
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	db 01       	movw	r26, r22
     a60:	0d 90       	ld	r0, X+
     a62:	00 20       	and	r0, r0
     a64:	e9 f7       	brne	.-6      	; 0xa60 <_ZN5Print5writeEPKc+0x6>
     a66:	11 97       	sbiw	r26, 0x01	; 1
     a68:	a6 1b       	sub	r26, r22
     a6a:	b7 0b       	sbc	r27, r23
     a6c:	ec 01       	movw	r28, r24
     a6e:	e8 81       	ld	r30, Y
     a70:	f9 81       	ldd	r31, Y+1	; 0x01
     a72:	02 80       	ldd	r0, Z+2	; 0x02
     a74:	f3 81       	ldd	r31, Z+3	; 0x03
     a76:	e0 2d       	mov	r30, r0
     a78:	ad 01       	movw	r20, r26
     a7a:	09 95       	icall
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <_Z7displayiiiiiiii>:

	  return cm;
	}

	// Display results
	void display(int x, int y, int d, int near, int nearX, int nearY, int rangeX, int rangeY)
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	4c 01       	movw	r8, r24
     aa4:	3b 01       	movw	r6, r22
     aa6:	2a 01       	movw	r4, r20
     aa8:	e9 01       	movw	r28, r18
	{
	  lcd.setCursor(0, 0);
     aaa:	82 e8       	ldi	r24, 0x82	; 130
     aac:	91 e0       	ldi	r25, 0x01	; 1
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(0, 1);
     ac2:	82 e8       	ldi	r24, 0x82	; 130
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     ace:	82 e8       	ldi	r24, 0x82	; 130
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(4,0);
     ada:	82 e8       	ldi	r24, 0x82	; 130
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	64 e0       	ldi	r22, 0x04	; 4
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     ae6:	82 e8       	ldi	r24, 0x82	; 130
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(4,1);
     af2:	82 e8       	ldi	r24, 0x82	; 130
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	64 e0       	ldi	r22, 0x04	; 4
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     afe:	82 e8       	ldi	r24, 0x82	; 130
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	71 e0       	ldi	r23, 0x01	; 1
     b06:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(8,0);
     b0a:	82 e8       	ldi	r24, 0x82	; 130
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	68 e0       	ldi	r22, 0x08	; 8
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     b16:	82 e8       	ldi	r24, 0x82	; 130
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	71 e0       	ldi	r23, 0x01	; 1
     b1e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(8,1);
     b22:	82 e8       	ldi	r24, 0x82	; 130
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	68 e0       	ldi	r22, 0x08	; 8
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	71 e0       	ldi	r23, 0x01	; 1
     b36:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(12,0);
     b3a:	82 e8       	ldi	r24, 0x82	; 130
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	6c e0       	ldi	r22, 0x0C	; 12
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     b46:	82 e8       	ldi	r24, 0x82	; 130
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  lcd.setCursor(12,1);
     b52:	82 e8       	ldi	r24, 0x82	; 130
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	6c e0       	ldi	r22, 0x0C	; 12
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.write("    ");
     b5e:	82 e8       	ldi	r24, 0x82	; 130
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>

	  lcd.setCursor(0, 0);
     b6a:	82 e8       	ldi	r24, 0x82	; 130
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(x);
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	b4 01       	movw	r22, r8
     b7c:	4a e0       	ldi	r20, 0x0A	; 10
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(0, 1);
     b84:	82 e8       	ldi	r24, 0x82	; 130
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(y);
     b90:	82 e8       	ldi	r24, 0x82	; 130
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	b3 01       	movw	r22, r6
     b96:	4a e0       	ldi	r20, 0x0A	; 10
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(4, 0);
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(nearX);
     baa:	82 e8       	ldi	r24, 0x82	; 130
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	b8 01       	movw	r22, r16
     bb0:	4a e0       	ldi	r20, 0x0A	; 10
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(4, 1);
     bb8:	82 e8       	ldi	r24, 0x82	; 130
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	64 e0       	ldi	r22, 0x04	; 4
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(nearY);
     bc4:	82 e8       	ldi	r24, 0x82	; 130
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	b7 01       	movw	r22, r14
     bca:	4a e0       	ldi	r20, 0x0A	; 10
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(8,0);
     bd2:	82 e8       	ldi	r24, 0x82	; 130
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	68 e0       	ldi	r22, 0x08	; 8
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(d);
     bde:	82 e8       	ldi	r24, 0x82	; 130
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	b2 01       	movw	r22, r4
     be4:	4a e0       	ldi	r20, 0x0A	; 10
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(8,1);
     bec:	82 e8       	ldi	r24, 0x82	; 130
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	68 e0       	ldi	r22, 0x08	; 8
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(near < 10000 ? near : -1);
     bf8:	87 e2       	ldi	r24, 0x27	; 39
     bfa:	c0 31       	cpi	r28, 0x10	; 16
     bfc:	d8 07       	cpc	r29, r24
     bfe:	14 f0       	brlt	.+4      	; 0xc04 <_Z7displayiiiiiiii+0x182>
     c00:	cf ef       	ldi	r28, 0xFF	; 255
     c02:	df ef       	ldi	r29, 0xFF	; 255
     c04:	82 e8       	ldi	r24, 0x82	; 130
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	be 01       	movw	r22, r28
     c0a:	4a e0       	ldi	r20, 0x0A	; 10
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(12, 0);
     c12:	82 e8       	ldi	r24, 0x82	; 130
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	6c e0       	ldi	r22, 0x0C	; 12
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(rangeX);
     c1e:	82 e8       	ldi	r24, 0x82	; 130
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	b6 01       	movw	r22, r12
     c24:	4a e0       	ldi	r20, 0x0A	; 10
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  lcd.setCursor(12, 1);
     c2c:	82 e8       	ldi	r24, 0x82	; 130
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	6c e0       	ldi	r22, 0x0C	; 12
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN13LiquidCrystal9setCursorEhh>
	  lcd.print(rangeY);
     c38:	82 e8       	ldi	r24, 0x82	; 130
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	b5 01       	movw	r22, r10
     c3e:	4a e0       	ldi	r20, 0x0A	; 10
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	08 95       	ret

00000c68 <_Z8distancev>:

	  return x == maxX && y == maxY ? 1 : 0;
	}

	// Read the distance from the sensor to the object it can 'see'
	int distance()
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
	{
	  int sensorValue = analogRead(sensorPin);
     c70:	80 91 29 01 	lds	r24, 0x0129
     c74:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <analogRead>
	#define VOLTS_PER_UNIT    .0049F        // (.0049 for 10 bit A-D)
	  float volts;
	  float inches;
	  float cm;

	  volts = (float)sensorValue * VOLTS_PER_UNIT;    // ("proxSens" is from analog read)
     c78:	aa 27       	eor	r26, r26
     c7a:	97 fd       	sbrc	r25, 7
     c7c:	a0 95       	com	r26
     c7e:	ba 2f       	mov	r27, r26
     c80:	bc 01       	movw	r22, r24
     c82:	cd 01       	movw	r24, r26
     c84:	0e 94 a8 10 	call	0x2150	; 0x2150 <__floatsisf>
     c88:	2e e2       	ldi	r18, 0x2E	; 46
     c8a:	30 e9       	ldi	r19, 0x90	; 144
     c8c:	40 ea       	ldi	r20, 0xA0	; 160
     c8e:	5b e3       	ldi	r21, 0x3B	; 59
     c90:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     c94:	7b 01       	movw	r14, r22
     c96:	8c 01       	movw	r16, r24
	  inches = 23.897 * pow(volts,-1.1907);           //calc inches using "power" trend line from Excel
	  cm = 60.495 * pow(volts,-1.1904);               // same in cm
	  if (volts < .2) { inches = -1.0; cm = -1.0; }   // out of range
     c98:	2d ec       	ldi	r18, 0xCD	; 205
     c9a:	3c ec       	ldi	r19, 0xCC	; 204
     c9c:	4c e4       	ldi	r20, 0x4C	; 76
     c9e:	5e e3       	ldi	r21, 0x3E	; 62
     ca0:	0e 94 09 10 	call	0x2012	; 0x2012 <__cmpsf2>
     ca4:	88 23       	and	r24, r24
     ca6:	2c f4       	brge	.+10     	; 0xcb2 <_Z8distancev+0x4a>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	9f eb       	ldi	r25, 0xBF	; 191
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <_Z8distancev+0x6e>
	  float inches;
	  float cm;

	  volts = (float)sensorValue * VOLTS_PER_UNIT;    // ("proxSens" is from analog read)
	  inches = 23.897 * pow(volts,-1.1907);           //calc inches using "power" trend line from Excel
	  cm = 60.495 * pow(volts,-1.1904);               // same in cm
     cb2:	c8 01       	movw	r24, r16
     cb4:	b7 01       	movw	r22, r14
     cb6:	27 e0       	ldi	r18, 0x07	; 7
     cb8:	3f e5       	ldi	r19, 0x5F	; 95
     cba:	48 e9       	ldi	r20, 0x98	; 152
     cbc:	5f eb       	ldi	r21, 0xBF	; 191
     cbe:	0e 94 bb 11 	call	0x2376	; 0x2376 <pow>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	ca 01       	movw	r24, r20
     cc8:	b9 01       	movw	r22, r18
     cca:	21 ee       	ldi	r18, 0xE1	; 225
     ccc:	3a ef       	ldi	r19, 0xFA	; 250
     cce:	41 e7       	ldi	r20, 0x71	; 113
     cd0:	52 e4       	ldi	r21, 0x42	; 66
     cd2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__mulsf3>
     cd6:	0e 94 75 10 	call	0x20ea	; 0x20ea <__fixsfsi>
	  if (volts < .2) { inches = -1.0; cm = -1.0; }   // out of range

	  return cm;
	}
     cda:	cb 01       	movw	r24, r22
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <_Z3panv>:

	// Look round the area bounded by minX,minY - maxX,maxY
	// x,y is the current position, it will be incremented by incrX,incrY
	bool pan()
	{
	  if (x < 0) x = minX-incrX;
     ce6:	80 91 a1 01 	lds	r24, 0x01A1
     cea:	90 91 a2 01 	lds	r25, 0x01A2
     cee:	97 ff       	sbrs	r25, 7
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <_Z3panv+0x28>
     cf2:	80 91 a5 01 	lds	r24, 0x01A5
     cf6:	90 91 a6 01 	lds	r25, 0x01A6
     cfa:	20 91 33 01 	lds	r18, 0x0133
     cfe:	30 91 34 01 	lds	r19, 0x0134
     d02:	82 1b       	sub	r24, r18
     d04:	93 0b       	sbc	r25, r19
     d06:	90 93 a2 01 	sts	0x01A2, r25
     d0a:	80 93 a1 01 	sts	0x01A1, r24
	  if (y < 0) y = minY-incrY;
     d0e:	80 91 a3 01 	lds	r24, 0x01A3
     d12:	90 91 a4 01 	lds	r25, 0x01A4
     d16:	97 ff       	sbrs	r25, 7
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <_Z3panv+0x50>
     d1a:	80 91 a7 01 	lds	r24, 0x01A7
     d1e:	90 91 a8 01 	lds	r25, 0x01A8
     d22:	20 91 35 01 	lds	r18, 0x0135
     d26:	30 91 36 01 	lds	r19, 0x0136
     d2a:	82 1b       	sub	r24, r18
     d2c:	93 0b       	sbc	r25, r19
     d2e:	90 93 a4 01 	sts	0x01A4, r25
     d32:	80 93 a3 01 	sts	0x01A3, r24

	  x += incrX;
     d36:	60 91 33 01 	lds	r22, 0x0133
     d3a:	70 91 34 01 	lds	r23, 0x0134
     d3e:	40 91 a1 01 	lds	r20, 0x01A1
     d42:	50 91 a2 01 	lds	r21, 0x01A2
     d46:	46 0f       	add	r20, r22
     d48:	57 1f       	adc	r21, r23
     d4a:	50 93 a2 01 	sts	0x01A2, r21
     d4e:	40 93 a1 01 	sts	0x01A1, r20
	  if (x == maxX && y == maxY) return 1;
     d52:	e0 91 a9 01 	lds	r30, 0x01A9
     d56:	f0 91 aa 01 	lds	r31, 0x01AA
     d5a:	4e 17       	cp	r20, r30
     d5c:	5f 07       	cpc	r21, r31
     d5e:	61 f4       	brne	.+24     	; 0xd78 <_Z3panv+0x92>
     d60:	20 91 a3 01 	lds	r18, 0x01A3
     d64:	30 91 a4 01 	lds	r19, 0x01A4
     d68:	80 91 ab 01 	lds	r24, 0x01AB
     d6c:	90 91 ac 01 	lds	r25, 0x01AC
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	59 f4       	brne	.+22     	; 0xd8c <_Z3panv+0xa6>
     d76:	e3 c0       	rjmp	.+454    	; 0xf3e <_Z3panv+0x258>
	  if (x >= maxX || x <= minX) incrX = -incrX;
     d78:	4e 17       	cp	r20, r30
     d7a:	5f 07       	cpc	r21, r31
     d7c:	3c f4       	brge	.+14     	; 0xd8c <_Z3panv+0xa6>
     d7e:	80 91 a5 01 	lds	r24, 0x01A5
     d82:	90 91 a6 01 	lds	r25, 0x01A6
     d86:	84 17       	cp	r24, r20
     d88:	95 07       	cpc	r25, r21
     d8a:	44 f0       	brlt	.+16     	; 0xd9c <_Z3panv+0xb6>
     d8c:	88 27       	eor	r24, r24
     d8e:	99 27       	eor	r25, r25
     d90:	86 1b       	sub	r24, r22
     d92:	97 0b       	sbc	r25, r23
     d94:	90 93 34 01 	sts	0x0134, r25
     d98:	80 93 33 01 	sts	0x0133, r24
	  if (x == minX || x == maxX)
     d9c:	60 91 a5 01 	lds	r22, 0x01A5
     da0:	70 91 a6 01 	lds	r23, 0x01A6
     da4:	46 17       	cp	r20, r22
     da6:	57 07       	cpc	r21, r23
     da8:	19 f0       	breq	.+6      	; 0xdb0 <_Z3panv+0xca>
     daa:	4e 17       	cp	r20, r30
     dac:	5f 07       	cpc	r21, r31
     dae:	21 f5       	brne	.+72     	; 0xdf8 <_Z3panv+0x112>
	  {
	    y += incrY;
     db0:	a0 91 35 01 	lds	r26, 0x0135
     db4:	b0 91 36 01 	lds	r27, 0x0136
     db8:	20 91 a3 01 	lds	r18, 0x01A3
     dbc:	30 91 a4 01 	lds	r19, 0x01A4
     dc0:	2a 0f       	add	r18, r26
     dc2:	3b 1f       	adc	r19, r27
     dc4:	30 93 a4 01 	sts	0x01A4, r19
     dc8:	20 93 a3 01 	sts	0x01A3, r18
	    if (y <= minY || y >= maxY) incrY = -incrY;
     dcc:	80 91 a7 01 	lds	r24, 0x01A7
     dd0:	90 91 a8 01 	lds	r25, 0x01A8
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	3c f4       	brge	.+14     	; 0xde8 <_Z3panv+0x102>
     dda:	80 91 ab 01 	lds	r24, 0x01AB
     dde:	90 91 ac 01 	lds	r25, 0x01AC
     de2:	28 17       	cp	r18, r24
     de4:	39 07       	cpc	r19, r25
     de6:	44 f0       	brlt	.+16     	; 0xdf8 <_Z3panv+0x112>
     de8:	88 27       	eor	r24, r24
     dea:	99 27       	eor	r25, r25
     dec:	8a 1b       	sub	r24, r26
     dee:	9b 0b       	sbc	r25, r27
     df0:	90 93 36 01 	sts	0x0136, r25
     df4:	80 93 35 01 	sts	0x0135, r24
	  }

	  if (x < minX) x = minX;
     df8:	46 17       	cp	r20, r22
     dfa:	57 07       	cpc	r21, r23
     dfc:	24 f4       	brge	.+8      	; 0xe06 <_Z3panv+0x120>
     dfe:	70 93 a2 01 	sts	0x01A2, r23
     e02:	60 93 a1 01 	sts	0x01A1, r22
	  if (x > maxX) x = maxX;
     e06:	80 91 a1 01 	lds	r24, 0x01A1
     e0a:	90 91 a2 01 	lds	r25, 0x01A2
     e0e:	e8 17       	cp	r30, r24
     e10:	f9 07       	cpc	r31, r25
     e12:	24 f4       	brge	.+8      	; 0xe1c <_Z3panv+0x136>
     e14:	f0 93 a2 01 	sts	0x01A2, r31
     e18:	e0 93 a1 01 	sts	0x01A1, r30
	  if (y < minY) y = minY;
     e1c:	20 91 a7 01 	lds	r18, 0x01A7
     e20:	30 91 a8 01 	lds	r19, 0x01A8
     e24:	80 91 a3 01 	lds	r24, 0x01A3
     e28:	90 91 a4 01 	lds	r25, 0x01A4
     e2c:	82 17       	cp	r24, r18
     e2e:	93 07       	cpc	r25, r19
     e30:	24 f4       	brge	.+8      	; 0xe3a <_Z3panv+0x154>
     e32:	30 93 a4 01 	sts	0x01A4, r19
     e36:	20 93 a3 01 	sts	0x01A3, r18
	  if (y > maxY) y = maxY;
     e3a:	20 91 ab 01 	lds	r18, 0x01AB
     e3e:	30 91 ac 01 	lds	r19, 0x01AC
     e42:	80 91 a3 01 	lds	r24, 0x01A3
     e46:	90 91 a4 01 	lds	r25, 0x01A4
     e4a:	28 17       	cp	r18, r24
     e4c:	39 07       	cpc	r19, r25
     e4e:	24 f4       	brge	.+8      	; 0xe58 <_Z3panv+0x172>
     e50:	30 93 a4 01 	sts	0x01A4, r19
     e54:	20 93 a3 01 	sts	0x01A3, r18

	  xServo.write(x);              // tell X servo to go to position in variable 'x'
     e58:	60 91 a1 01 	lds	r22, 0x01A1
     e5c:	70 91 a2 01 	lds	r23, 0x01A2
     e60:	87 e9       	ldi	r24, 0x97	; 151
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN5Servo5writeEi>
	  yServo.write(y);              // tell Y servo to go to position in variable 'y'
     e68:	60 91 a3 01 	lds	r22, 0x01A3
     e6c:	70 91 a4 01 	lds	r23, 0x01A4
     e70:	8a e9       	ldi	r24, 0x9A	; 154
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 2f 01 	call	0x25e	; 0x25e <_ZN5Servo5writeEi>
	  delay(speed);                 // waits for the servo to reach the position
     e78:	60 91 37 01 	lds	r22, 0x0137
     e7c:	70 91 38 01 	lds	r23, 0x0138
     e80:	88 27       	eor	r24, r24
     e82:	77 fd       	sbrc	r23, 7
     e84:	80 95       	com	r24
     e86:	98 2f       	mov	r25, r24
     e88:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <delay>

	  Serial.print(x);
     e8c:	60 91 a1 01 	lds	r22, 0x01A1
     e90:	70 91 a2 01 	lds	r23, 0x01A2
     e94:	81 e4       	ldi	r24, 0x41	; 65
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	4a e0       	ldi	r20, 0x0A	; 10
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  Serial.write(",");
     ea0:	81 e4       	ldi	r24, 0x41	; 65
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	71 e0       	ldi	r23, 0x01	; 1
     ea8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  Serial.print(y);
     eac:	60 91 a3 01 	lds	r22, 0x01A3
     eb0:	70 91 a4 01 	lds	r23, 0x01A4
     eb4:	81 e4       	ldi	r24, 0x41	; 65
     eb6:	92 e0       	ldi	r25, 0x02	; 2
     eb8:	4a e0       	ldi	r20, 0x0A	; 10
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  Serial.write(" -> ");
     ec0:	81 e4       	ldi	r24, 0x41	; 65
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	67 e0       	ldi	r22, 0x07	; 7
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  Serial.print(maxX);
     ecc:	60 91 a9 01 	lds	r22, 0x01A9
     ed0:	70 91 aa 01 	lds	r23, 0x01AA
     ed4:	81 e4       	ldi	r24, 0x41	; 65
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	4a e0       	ldi	r20, 0x0A	; 10
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  Serial.write(",");
     ee0:	81 e4       	ldi	r24, 0x41	; 65
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	65 e0       	ldi	r22, 0x05	; 5
     ee6:	71 e0       	ldi	r23, 0x01	; 1
     ee8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	  Serial.print(maxY);
     eec:	60 91 ab 01 	lds	r22, 0x01AB
     ef0:	70 91 ac 01 	lds	r23, 0x01AC
     ef4:	81 e4       	ldi	r24, 0x41	; 65
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	4a e0       	ldi	r20, 0x0A	; 10
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	  Serial.println("");
     f00:	81 e4       	ldi	r24, 0x41	; 65
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	6c e0       	ldi	r22, 0x0C	; 12
     f06:	71 e0       	ldi	r23, 0x01	; 1
     f08:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN5Print7printlnEPKc>

	  return x == maxX && y == maxY ? 1 : 0;
     f0c:	20 91 a1 01 	lds	r18, 0x01A1
     f10:	30 91 a2 01 	lds	r19, 0x01A2
     f14:	80 91 a9 01 	lds	r24, 0x01A9
     f18:	90 91 aa 01 	lds	r25, 0x01AA
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	11 f0       	breq	.+4      	; 0xf26 <_Z3panv+0x240>
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <_Z3panv+0x25a>
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	20 91 a3 01 	lds	r18, 0x01A3
     f2c:	30 91 a4 01 	lds	r19, 0x01A4
     f30:	80 91 ab 01 	lds	r24, 0x01AB
     f34:	90 91 ac 01 	lds	r25, 0x01AC
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	09 f4       	brne	.+2      	; 0xf40 <_Z3panv+0x25a>
     f3e:	41 e0       	ldi	r20, 0x01	; 1
	}
     f40:	84 2f       	mov	r24, r20
     f42:	08 95       	ret

00000f44 <loop>:
	  lcd.begin(16, 2);
	  lcd.clear();
}

// The loop function is called in an endless loop
void loop()
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
{
	  // Check for the toggle switch. If it changes from Low to High, pause or resume running
	  if (digitalRead(7) == LOW)
     f56:	87 e0       	ldi	r24, 0x07	; 7
     f58:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <digitalRead>
     f5c:	89 2b       	or	r24, r25
     f5e:	39 f4       	brne	.+14     	; 0xf6e <loop+0x2a>
	  {
	    toggle = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 a0 01 	sts	0x01A0, r25
     f68:	80 93 9f 01 	sts	0x019F, r24
     f6c:	1d c0       	rjmp	.+58     	; 0xfa8 <loop+0x64>
	  }
	  else if (toggle == 1)
     f6e:	20 91 9f 01 	lds	r18, 0x019F
     f72:	30 91 a0 01 	lds	r19, 0x01A0
     f76:	21 30       	cpi	r18, 0x01	; 1
     f78:	31 05       	cpc	r19, r1
     f7a:	b1 f4       	brne	.+44     	; 0xfa8 <loop+0x64>
	  {
	    toggle = 0;
     f7c:	10 92 a0 01 	sts	0x01A0, r1
     f80:	10 92 9f 01 	sts	0x019F, r1
	    run = 1-run;
     f84:	80 91 9d 01 	lds	r24, 0x019D
     f88:	90 91 9e 01 	lds	r25, 0x019E
     f8c:	a9 01       	movw	r20, r18
     f8e:	48 1b       	sub	r20, r24
     f90:	59 0b       	sbc	r21, r25
     f92:	50 93 9e 01 	sts	0x019E, r21
     f96:	40 93 9d 01 	sts	0x019D, r20
	    if (run == 0) lcd.clear();
     f9a:	41 15       	cp	r20, r1
     f9c:	51 05       	cpc	r21, r1
     f9e:	21 f4       	brne	.+8      	; 0xfa8 <loop+0x64>
     fa0:	82 e8       	ldi	r24, 0x82	; 130
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN13LiquidCrystal5clearEv>
	  }
	  if (run == 0) return;
     fa8:	80 91 9d 01 	lds	r24, 0x019D
     fac:	90 91 9e 01 	lds	r25, 0x019E
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <loop+0x72>
     fb4:	1a c2       	rjmp	.+1076   	; 0x13ea <loop+0x4a6>

	  int scanned = 0;
	  if (rangeX > 1 || rangeY > 1)
     fb6:	80 91 b1 01 	lds	r24, 0x01B1
     fba:	90 91 b2 01 	lds	r25, 0x01B2
     fbe:	02 97       	sbiw	r24, 0x02	; 2
     fc0:	34 f4       	brge	.+12     	; 0xfce <loop+0x8a>
     fc2:	80 91 b3 01 	lds	r24, 0x01B3
     fc6:	90 91 b4 01 	lds	r25, 0x01B4
     fca:	02 97       	sbiw	r24, 0x02	; 2
     fcc:	54 f0       	brlt	.+20     	; 0xfe2 <loop+0x9e>
	  {
	    scanned = pan();
     fce:	0e 94 73 06 	call	0xce6	; 0xce6 <_Z3panv>
     fd2:	98 2e       	mov	r9, r24
	    run = 0;
	    lcd.clear();
	    return;
	  }

	  int d = distance();
     fd4:	0e 94 34 06 	call	0xc68	; 0xc68 <_Z8distancev>
     fd8:	ac 01       	movw	r20, r24

	  if (d > 0 && d < near)
     fda:	18 16       	cp	r1, r24
     fdc:	19 06       	cpc	r1, r25
     fde:	54 f0       	brlt	.+20     	; 0xff4 <loop+0xb0>
     fe0:	24 c0       	rjmp	.+72     	; 0x102a <loop+0xe6>
	  {
	    scanned = pan();
	  }
	  else
	  {
	    run = 0;
     fe2:	10 92 9e 01 	sts	0x019E, r1
     fe6:	10 92 9d 01 	sts	0x019D, r1
	    lcd.clear();
     fea:	82 e8       	ldi	r24, 0x82	; 130
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN13LiquidCrystal5clearEv>
     ff2:	fb c1       	rjmp	.+1014   	; 0x13ea <loop+0x4a6>
	    return;
	  }

	  int d = distance();

	  if (d > 0 && d < near)
     ff4:	80 91 39 01 	lds	r24, 0x0139
     ff8:	90 91 3a 01 	lds	r25, 0x013A
     ffc:	48 17       	cp	r20, r24
     ffe:	59 07       	cpc	r21, r25
    1000:	a4 f4       	brge	.+40     	; 0x102a <loop+0xe6>
	  {
	    near = d;
    1002:	50 93 3a 01 	sts	0x013A, r21
    1006:	40 93 39 01 	sts	0x0139, r20
	    nearX = x;
    100a:	80 91 a1 01 	lds	r24, 0x01A1
    100e:	90 91 a2 01 	lds	r25, 0x01A2
    1012:	90 93 b6 01 	sts	0x01B6, r25
    1016:	80 93 b5 01 	sts	0x01B5, r24
	    nearY = y;
    101a:	80 91 a3 01 	lds	r24, 0x01A3
    101e:	90 91 a4 01 	lds	r25, 0x01A4
    1022:	90 93 b8 01 	sts	0x01B8, r25
    1026:	80 93 b7 01 	sts	0x01B7, r24
	  }

	  display(x, y, d, near, nearX, nearY, rangeX, rangeY);
    102a:	60 91 a3 01 	lds	r22, 0x01A3
    102e:	70 91 a4 01 	lds	r23, 0x01A4
    1032:	20 91 39 01 	lds	r18, 0x0139
    1036:	30 91 3a 01 	lds	r19, 0x013A
    103a:	00 91 b5 01 	lds	r16, 0x01B5
    103e:	10 91 b6 01 	lds	r17, 0x01B6
    1042:	e0 90 b7 01 	lds	r14, 0x01B7
    1046:	f0 90 b8 01 	lds	r15, 0x01B8
    104a:	c0 90 b1 01 	lds	r12, 0x01B1
    104e:	d0 90 b2 01 	lds	r13, 0x01B2
    1052:	a0 90 b3 01 	lds	r10, 0x01B3
    1056:	b0 90 b4 01 	lds	r11, 0x01B4
    105a:	80 91 a1 01 	lds	r24, 0x01A1
    105e:	90 91 a2 01 	lds	r25, 0x01A2
    1062:	0e 94 41 05 	call	0xa82	; 0xa82 <_Z7displayiiiiiiii>

	  if (scanned)
    1066:	99 20       	and	r9, r9
    1068:	09 f4       	brne	.+2      	; 0x106c <loop+0x128>
    106a:	bf c1       	rjmp	.+894    	; 0x13ea <loop+0x4a6>
	  {
	    Serial.print("Near ");
    106c:	81 e4       	ldi	r24, 0x41	; 65
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	6d e0       	ldi	r22, 0x0D	; 13
    1072:	71 e0       	ldi	r23, 0x01	; 1
    1074:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print5printEPKc>
	    Serial.print(nearX);
    1078:	60 91 b5 01 	lds	r22, 0x01B5
    107c:	70 91 b6 01 	lds	r23, 0x01B6
    1080:	81 e4       	ldi	r24, 0x41	; 65
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	4a e0       	ldi	r20, 0x0A	; 10
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	    Serial.write(",");
    108c:	81 e4       	ldi	r24, 0x41	; 65
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	65 e0       	ldi	r22, 0x05	; 5
    1092:	71 e0       	ldi	r23, 0x01	; 1
    1094:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	    Serial.print(nearY);
    1098:	60 91 b7 01 	lds	r22, 0x01B7
    109c:	70 91 b8 01 	lds	r23, 0x01B8
    10a0:	81 e4       	ldi	r24, 0x41	; 65
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	4a e0       	ldi	r20, 0x0A	; 10
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	    Serial.println("");
    10ac:	81 e4       	ldi	r24, 0x41	; 65
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	6c e0       	ldi	r22, 0x0C	; 12
    10b2:	71 e0       	ldi	r23, 0x01	; 1
    10b4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN5Print7printlnEPKc>

	    if (nearX > 0 && nearY > 0)
    10b8:	20 91 b5 01 	lds	r18, 0x01B5
    10bc:	30 91 b6 01 	lds	r19, 0x01B6
    10c0:	12 16       	cp	r1, r18
    10c2:	13 06       	cpc	r1, r19
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <loop+0x184>
    10c6:	3d c1       	rjmp	.+634    	; 0x1342 <loop+0x3fe>
    10c8:	60 91 b7 01 	lds	r22, 0x01B7
    10cc:	70 91 b8 01 	lds	r23, 0x01B8
    10d0:	16 16       	cp	r1, r22
    10d2:	17 06       	cpc	r1, r23
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <loop+0x194>
    10d6:	35 c1       	rjmp	.+618    	; 0x1342 <loop+0x3fe>
	    {
	      if (rangeX > 1) {rangeX /= 2; if (incrX > 1) incrX--;}
    10d8:	80 91 b1 01 	lds	r24, 0x01B1
    10dc:	90 91 b2 01 	lds	r25, 0x01B2
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	94 f0       	brlt	.+36     	; 0x110a <loop+0x1c6>
    10e6:	95 95       	asr	r25
    10e8:	87 95       	ror	r24
    10ea:	90 93 b2 01 	sts	0x01B2, r25
    10ee:	80 93 b1 01 	sts	0x01B1, r24
    10f2:	80 91 33 01 	lds	r24, 0x0133
    10f6:	90 91 34 01 	lds	r25, 0x0134
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	91 05       	cpc	r25, r1
    10fe:	2c f0       	brlt	.+10     	; 0x110a <loop+0x1c6>
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	90 93 34 01 	sts	0x0134, r25
    1106:	80 93 33 01 	sts	0x0133, r24
	      if (rangeY > 1) {rangeY /= 2; if (incrY > 1) incrY--;}
    110a:	80 91 b3 01 	lds	r24, 0x01B3
    110e:	90 91 b4 01 	lds	r25, 0x01B4
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	94 f0       	brlt	.+36     	; 0x113c <loop+0x1f8>
    1118:	95 95       	asr	r25
    111a:	87 95       	ror	r24
    111c:	90 93 b4 01 	sts	0x01B4, r25
    1120:	80 93 b3 01 	sts	0x01B3, r24
    1124:	80 91 35 01 	lds	r24, 0x0135
    1128:	90 91 36 01 	lds	r25, 0x0136
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	91 05       	cpc	r25, r1
    1130:	2c f0       	brlt	.+10     	; 0x113c <loop+0x1f8>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	90 93 36 01 	sts	0x0136, r25
    1138:	80 93 35 01 	sts	0x0135, r24
	      speed += 5;
    113c:	80 91 37 01 	lds	r24, 0x0137
    1140:	90 91 38 01 	lds	r25, 0x0138
    1144:	05 96       	adiw	r24, 0x05	; 5
    1146:	90 93 38 01 	sts	0x0138, r25
    114a:	80 93 37 01 	sts	0x0137, r24

	      if (nearX < minX+rangeX) nearX = minX + rangeX;
    114e:	40 91 b1 01 	lds	r20, 0x01B1
    1152:	50 91 b2 01 	lds	r21, 0x01B2
    1156:	80 91 a5 01 	lds	r24, 0x01A5
    115a:	90 91 a6 01 	lds	r25, 0x01A6
    115e:	84 0f       	add	r24, r20
    1160:	95 1f       	adc	r25, r21
    1162:	28 17       	cp	r18, r24
    1164:	39 07       	cpc	r19, r25
    1166:	24 f4       	brge	.+8      	; 0x1170 <loop+0x22c>
    1168:	90 93 b6 01 	sts	0x01B6, r25
    116c:	80 93 b5 01 	sts	0x01B5, r24
	      if (nearX > maxX-rangeX) nearX = maxX - rangeX;
    1170:	20 91 a9 01 	lds	r18, 0x01A9
    1174:	30 91 aa 01 	lds	r19, 0x01AA
    1178:	24 1b       	sub	r18, r20
    117a:	35 0b       	sbc	r19, r21
    117c:	80 91 b5 01 	lds	r24, 0x01B5
    1180:	90 91 b6 01 	lds	r25, 0x01B6
    1184:	28 17       	cp	r18, r24
    1186:	39 07       	cpc	r19, r25
    1188:	24 f4       	brge	.+8      	; 0x1192 <loop+0x24e>
    118a:	30 93 b6 01 	sts	0x01B6, r19
    118e:	20 93 b5 01 	sts	0x01B5, r18
	      if (nearY < minY+rangeY) nearY = minY + rangeY;
    1192:	40 91 b3 01 	lds	r20, 0x01B3
    1196:	50 91 b4 01 	lds	r21, 0x01B4
    119a:	80 91 a7 01 	lds	r24, 0x01A7
    119e:	90 91 a8 01 	lds	r25, 0x01A8
    11a2:	84 0f       	add	r24, r20
    11a4:	95 1f       	adc	r25, r21
    11a6:	68 17       	cp	r22, r24
    11a8:	79 07       	cpc	r23, r25
    11aa:	24 f4       	brge	.+8      	; 0x11b4 <loop+0x270>
    11ac:	90 93 b8 01 	sts	0x01B8, r25
    11b0:	80 93 b7 01 	sts	0x01B7, r24
	      if (nearY > maxY-rangeY) nearY = maxY - rangeY;
    11b4:	20 91 ab 01 	lds	r18, 0x01AB
    11b8:	30 91 ac 01 	lds	r19, 0x01AC
    11bc:	24 1b       	sub	r18, r20
    11be:	35 0b       	sbc	r19, r21
    11c0:	80 91 b7 01 	lds	r24, 0x01B7
    11c4:	90 91 b8 01 	lds	r25, 0x01B8
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	24 f4       	brge	.+8      	; 0x11d6 <loop+0x292>
    11ce:	30 93 b8 01 	sts	0x01B8, r19
    11d2:	20 93 b7 01 	sts	0x01B7, r18

	      Serial.print("-> ");
    11d6:	81 e4       	ldi	r24, 0x41	; 65
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	63 e1       	ldi	r22, 0x13	; 19
    11dc:	71 e0       	ldi	r23, 0x01	; 1
    11de:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print5printEPKc>
	      Serial.print(nearX);
    11e2:	60 91 b5 01 	lds	r22, 0x01B5
    11e6:	70 91 b6 01 	lds	r23, 0x01B6
    11ea:	81 e4       	ldi	r24, 0x41	; 65
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	4a e0       	ldi	r20, 0x0A	; 10
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.write(",");
    11f6:	81 e4       	ldi	r24, 0x41	; 65
    11f8:	92 e0       	ldi	r25, 0x02	; 2
    11fa:	65 e0       	ldi	r22, 0x05	; 5
    11fc:	71 e0       	ldi	r23, 0x01	; 1
    11fe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	      Serial.print(nearY);
    1202:	60 91 b7 01 	lds	r22, 0x01B7
    1206:	70 91 b8 01 	lds	r23, 0x01B8
    120a:	81 e4       	ldi	r24, 0x41	; 65
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	4a e0       	ldi	r20, 0x0A	; 10
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.println("");
    1216:	81 e4       	ldi	r24, 0x41	; 65
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	6c e0       	ldi	r22, 0x0C	; 12
    121c:	71 e0       	ldi	r23, 0x01	; 1
    121e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN5Print7printlnEPKc>

	      minX = nearX - rangeX;
    1222:	40 91 b5 01 	lds	r20, 0x01B5
    1226:	50 91 b6 01 	lds	r21, 0x01B6
    122a:	80 91 b1 01 	lds	r24, 0x01B1
    122e:	90 91 b2 01 	lds	r25, 0x01B2
    1232:	9a 01       	movw	r18, r20
    1234:	28 1b       	sub	r18, r24
    1236:	39 0b       	sbc	r19, r25
    1238:	30 93 a6 01 	sts	0x01A6, r19
    123c:	20 93 a5 01 	sts	0x01A5, r18
	      maxX = nearX + rangeX;
    1240:	84 0f       	add	r24, r20
    1242:	95 1f       	adc	r25, r21
    1244:	90 93 aa 01 	sts	0x01AA, r25
    1248:	80 93 a9 01 	sts	0x01A9, r24
	      minY = nearY - rangeY;
    124c:	40 91 b7 01 	lds	r20, 0x01B7
    1250:	50 91 b8 01 	lds	r21, 0x01B8
    1254:	80 91 b3 01 	lds	r24, 0x01B3
    1258:	90 91 b4 01 	lds	r25, 0x01B4
    125c:	9a 01       	movw	r18, r20
    125e:	28 1b       	sub	r18, r24
    1260:	39 0b       	sbc	r19, r25
    1262:	30 93 a8 01 	sts	0x01A8, r19
    1266:	20 93 a7 01 	sts	0x01A7, r18
	      maxY = nearY + rangeY;
    126a:	84 0f       	add	r24, r20
    126c:	95 1f       	adc	r25, r21
    126e:	90 93 ac 01 	sts	0x01AC, r25
    1272:	80 93 ab 01 	sts	0x01AB, r24

	      Serial.print("New box ");
    1276:	81 e4       	ldi	r24, 0x41	; 65
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	67 e1       	ldi	r22, 0x17	; 23
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print5printEPKc>
	      Serial.print(minX);
    1282:	60 91 a5 01 	lds	r22, 0x01A5
    1286:	70 91 a6 01 	lds	r23, 0x01A6
    128a:	81 e4       	ldi	r24, 0x41	; 65
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	4a e0       	ldi	r20, 0x0A	; 10
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.write(",");
    1296:	81 e4       	ldi	r24, 0x41	; 65
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	65 e0       	ldi	r22, 0x05	; 5
    129c:	71 e0       	ldi	r23, 0x01	; 1
    129e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	      Serial.print(minY);
    12a2:	60 91 a7 01 	lds	r22, 0x01A7
    12a6:	70 91 a8 01 	lds	r23, 0x01A8
    12aa:	81 e4       	ldi	r24, 0x41	; 65
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	4a e0       	ldi	r20, 0x0A	; 10
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.print(" - ");
    12b6:	81 e4       	ldi	r24, 0x41	; 65
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	60 e2       	ldi	r22, 0x20	; 32
    12bc:	71 e0       	ldi	r23, 0x01	; 1
    12be:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print5printEPKc>
	      Serial.print(maxX);
    12c2:	60 91 a9 01 	lds	r22, 0x01A9
    12c6:	70 91 aa 01 	lds	r23, 0x01AA
    12ca:	81 e4       	ldi	r24, 0x41	; 65
    12cc:	92 e0       	ldi	r25, 0x02	; 2
    12ce:	4a e0       	ldi	r20, 0x0A	; 10
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.write(",");
    12d6:	81 e4       	ldi	r24, 0x41	; 65
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	65 e0       	ldi	r22, 0x05	; 5
    12dc:	71 e0       	ldi	r23, 0x01	; 1
    12de:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	      Serial.print(maxY);
    12e2:	60 91 ab 01 	lds	r22, 0x01AB
    12e6:	70 91 ac 01 	lds	r23, 0x01AC
    12ea:	81 e4       	ldi	r24, 0x41	; 65
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	4a e0       	ldi	r20, 0x0A	; 10
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.print(" (");
    12f6:	81 e4       	ldi	r24, 0x41	; 65
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	64 e2       	ldi	r22, 0x24	; 36
    12fc:	71 e0       	ldi	r23, 0x01	; 1
    12fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN5Print5printEPKc>
	      Serial.print(rangeX);
    1302:	60 91 b1 01 	lds	r22, 0x01B1
    1306:	70 91 b2 01 	lds	r23, 0x01B2
    130a:	81 e4       	ldi	r24, 0x41	; 65
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	4a e0       	ldi	r20, 0x0A	; 10
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.write(",");
    1316:	81 e4       	ldi	r24, 0x41	; 65
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	65 e0       	ldi	r22, 0x05	; 5
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
	      Serial.print(rangeY);
    1322:	60 91 b3 01 	lds	r22, 0x01B3
    1326:	70 91 b4 01 	lds	r23, 0x01B4
    132a:	81 e4       	ldi	r24, 0x41	; 65
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	4a e0       	ldi	r20, 0x0A	; 10
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN5Print5printEii>
	      Serial.println(")");
    1336:	81 e4       	ldi	r24, 0x41	; 65
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	67 e2       	ldi	r22, 0x27	; 39
    133c:	71 e0       	ldi	r23, 0x01	; 1
    133e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN5Print7printlnEPKc>
	    }

	    near = 10000;
    1342:	80 e1       	ldi	r24, 0x10	; 16
    1344:	97 e2       	ldi	r25, 0x27	; 39
    1346:	90 93 3a 01 	sts	0x013A, r25
    134a:	80 93 39 01 	sts	0x0139, r24
	    nearX = 0;
    134e:	10 92 b6 01 	sts	0x01B6, r1
    1352:	10 92 b5 01 	sts	0x01B5, r1
	    nearY = 0;
    1356:	10 92 b8 01 	sts	0x01B8, r1
    135a:	10 92 b7 01 	sts	0x01B7, r1

	    x = -1;
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	90 93 a2 01 	sts	0x01A2, r25
    1366:	80 93 a1 01 	sts	0x01A1, r24
	    y = -1;
    136a:	90 93 a4 01 	sts	0x01A4, r25
    136e:	80 93 a3 01 	sts	0x01A3, r24

	    if (minX < loX) minX = loX;
    1372:	20 91 2b 01 	lds	r18, 0x012B
    1376:	30 91 2c 01 	lds	r19, 0x012C
    137a:	80 91 a5 01 	lds	r24, 0x01A5
    137e:	90 91 a6 01 	lds	r25, 0x01A6
    1382:	82 17       	cp	r24, r18
    1384:	93 07       	cpc	r25, r19
    1386:	24 f4       	brge	.+8      	; 0x1390 <loop+0x44c>
    1388:	30 93 a6 01 	sts	0x01A6, r19
    138c:	20 93 a5 01 	sts	0x01A5, r18
	    if (maxX > hiX) maxX = hiX;
    1390:	20 91 2d 01 	lds	r18, 0x012D
    1394:	30 91 2e 01 	lds	r19, 0x012E
    1398:	80 91 a9 01 	lds	r24, 0x01A9
    139c:	90 91 aa 01 	lds	r25, 0x01AA
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	24 f4       	brge	.+8      	; 0x13ae <loop+0x46a>
    13a6:	30 93 aa 01 	sts	0x01AA, r19
    13aa:	20 93 a9 01 	sts	0x01A9, r18
	    if (minY < loY) minY = loY;
    13ae:	20 91 2f 01 	lds	r18, 0x012F
    13b2:	30 91 30 01 	lds	r19, 0x0130
    13b6:	80 91 a7 01 	lds	r24, 0x01A7
    13ba:	90 91 a8 01 	lds	r25, 0x01A8
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	24 f4       	brge	.+8      	; 0x13cc <loop+0x488>
    13c4:	30 93 a8 01 	sts	0x01A8, r19
    13c8:	20 93 a7 01 	sts	0x01A7, r18
	    if (maxY > hiY) maxY = hiY;
    13cc:	20 91 31 01 	lds	r18, 0x0131
    13d0:	30 91 32 01 	lds	r19, 0x0132
    13d4:	80 91 ab 01 	lds	r24, 0x01AB
    13d8:	90 91 ac 01 	lds	r25, 0x01AC
    13dc:	28 17       	cp	r18, r24
    13de:	39 07       	cpc	r19, r25
    13e0:	24 f4       	brge	.+8      	; 0x13ea <loop+0x4a6>
    13e2:	30 93 ac 01 	sts	0x01AC, r19
    13e6:	20 93 ab 01 	sts	0x01AB, r18

	    scanned = 0;
	  }
	}
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	9f 90       	pop	r9
    13fc:	08 95       	ret

000013fe <setup>:
int near = 10000;
int nearX = 0;
int nearY = 0;

//The setup function is called once at startup of the sketch
void setup()
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
{
// Add your initialization code here

	  Serial.begin(9600);
    1402:	81 e4       	ldi	r24, 0x41	; 65
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	40 e8       	ldi	r20, 0x80	; 128
    1408:	55 e2       	ldi	r21, 0x25	; 37
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <_ZN14HardwareSerial5beginEm>

	  pinMode (7, INPUT);
    1412:	87 e0       	ldi	r24, 0x07	; 7
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <pinMode>

	  xServo.attach(9);  // attaches the servo on pin 11 to the servo object
    141a:	87 e9       	ldi	r24, 0x97	; 151
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	69 e0       	ldi	r22, 0x09	; 9
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN5Servo6attachEi>
	  yServo.attach(10);  // attaches the servo on pin 12 to the servo object
    1426:	8a e9       	ldi	r24, 0x9A	; 154
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	6a e0       	ldi	r22, 0x0A	; 10
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN5Servo6attachEi>
	  x = -1;
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	9f ef       	ldi	r25, 0xFF	; 255
    1436:	90 93 a2 01 	sts	0x01A2, r25
    143a:	80 93 a1 01 	sts	0x01A1, r24
	  y = -1;
    143e:	90 93 a4 01 	sts	0x01A4, r25
    1442:	80 93 a3 01 	sts	0x01A3, r24
	  run = 0;
    1446:	10 92 9e 01 	sts	0x019E, r1
    144a:	10 92 9d 01 	sts	0x019D, r1
	  toggle = 0;
    144e:	10 92 a0 01 	sts	0x01A0, r1
    1452:	10 92 9f 01 	sts	0x019F, r1

	  nearX = startX;
    1456:	80 91 ad 01 	lds	r24, 0x01AD
    145a:	90 91 ae 01 	lds	r25, 0x01AE
    145e:	90 93 b6 01 	sts	0x01B6, r25
    1462:	80 93 b5 01 	sts	0x01B5, r24
	  nearY = startY;
    1466:	80 91 af 01 	lds	r24, 0x01AF
    146a:	90 91 b0 01 	lds	r25, 0x01B0
    146e:	90 93 b8 01 	sts	0x01B8, r25
    1472:	80 93 b7 01 	sts	0x01B7, r24

	  lcd.begin(16, 2);
    1476:	02 e8       	ldi	r16, 0x82	; 130
    1478:	11 e0       	ldi	r17, 0x01	; 1
    147a:	c8 01       	movw	r24, r16
    147c:	60 e1       	ldi	r22, 0x10	; 16
    147e:	42 e0       	ldi	r20, 0x02	; 2
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN13LiquidCrystal5beginEhhh>
	  lcd.clear();
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN13LiquidCrystal5clearEv>
}
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	08 95       	ret

00001492 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1492:	08 95       	ret

00001494 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    14ac:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    14b0:	20 91 f9 01 	lds	r18, 0x01F9
    14b4:	30 91 fa 01 	lds	r19, 0x01FA

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	2f 73       	andi	r18, 0x3F	; 63
    14be:	30 70       	andi	r19, 0x00	; 0
    14c0:	80 91 fb 01 	lds	r24, 0x01FB
    14c4:	90 91 fc 01 	lds	r25, 0x01FC
    14c8:	28 17       	cp	r18, r24
    14ca:	39 07       	cpc	r19, r25
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    14ce:	e0 91 f9 01 	lds	r30, 0x01F9
    14d2:	f0 91 fa 01 	lds	r31, 0x01FA
    14d6:	e7 54       	subi	r30, 0x47	; 71
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	40 83       	st	Z, r20
    buffer->head = i;
    14dc:	30 93 fa 01 	sts	0x01FA, r19
    14e0:	20 93 f9 01 	sts	0x01F9, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    14fc:	e0 91 4d 02 	lds	r30, 0x024D
    1500:	f0 91 4e 02 	lds	r31, 0x024E
    1504:	e0 5c       	subi	r30, 0xC0	; 192
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	81 91       	ld	r24, Z+
    150a:	91 91       	ld	r25, Z+
    150c:	20 81       	ld	r18, Z
    150e:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1510:	82 1b       	sub	r24, r18
    1512:	93 0b       	sbc	r25, r19
    1514:	8f 73       	andi	r24, 0x3F	; 63
    1516:	90 70       	andi	r25, 0x00	; 0
    1518:	89 2b       	or	r24, r25
    151a:	11 f0       	breq	.+4      	; 0x1520 <_Z14serialEventRunv+0x24>
    151c:	0e 94 49 0a 	call	0x1492	; 0x1492 <_Z11serialEventv>
    1520:	08 95       	ret

00001522 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	ef 93       	push	r30
    1536:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1538:	20 91 3d 02 	lds	r18, 0x023D
    153c:	30 91 3e 02 	lds	r19, 0x023E
    1540:	80 91 3f 02 	lds	r24, 0x023F
    1544:	90 91 40 02 	lds	r25, 0x0240
    1548:	28 17       	cp	r18, r24
    154a:	39 07       	cpc	r19, r25
    154c:	31 f4       	brne	.+12     	; 0x155a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    154e:	80 91 c1 00 	lds	r24, 0x00C1
    1552:	8f 7d       	andi	r24, 0xDF	; 223
    1554:	80 93 c1 00 	sts	0x00C1, r24
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    155a:	e0 91 3f 02 	lds	r30, 0x023F
    155e:	f0 91 40 02 	lds	r31, 0x0240
    1562:	e3 50       	subi	r30, 0x03	; 3
    1564:	fe 4f       	sbci	r31, 0xFE	; 254
    1566:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1568:	80 91 3f 02 	lds	r24, 0x023F
    156c:	90 91 40 02 	lds	r25, 0x0240
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	8f 73       	andi	r24, 0x3F	; 63
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	90 93 40 02 	sts	0x0240, r25
    157a:	80 93 3f 02 	sts	0x023F, r24
	
  #if defined(UDR0)
    UDR0 = c;
    157e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
    15ac:	7a 01       	movw	r14, r20
    15ae:	8b 01       	movw	r16, r22
    15b0:	dd 24       	eor	r13, r13
    15b2:	40 30       	cpi	r20, 0x00	; 0
    15b4:	81 ee       	ldi	r24, 0xE1	; 225
    15b6:	58 07       	cpc	r21, r24
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	68 07       	cpc	r22, r24
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	78 07       	cpc	r23, r24
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <_ZN14HardwareSerial5beginEm+0x2e>
    15c2:	dd 24       	eor	r13, r13
    15c4:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	a9 2e       	mov	r10, r25
    15ca:	b1 2c       	mov	r11, r1
    15cc:	ec 89       	ldd	r30, Y+20	; 0x14
    15ce:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    15d0:	dd 20       	and	r13, r13
    15d2:	69 f0       	breq	.+26     	; 0x15ee <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    15d4:	c5 01       	movw	r24, r10
    15d6:	0e 8c       	ldd	r0, Y+30	; 0x1e
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <_ZN14HardwareSerial5beginEm+0x46>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <_ZN14HardwareSerial5beginEm+0x42>
    15e2:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	79 e0       	ldi	r23, 0x09	; 9
    15e8:	8d e3       	ldi	r24, 0x3D	; 61
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    15ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    15f0:	60 e8       	ldi	r22, 0x80	; 128
    15f2:	74 e8       	ldi	r23, 0x84	; 132
    15f4:	8e e1       	ldi	r24, 0x1E	; 30
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a8 01       	movw	r20, r16
    15fa:	97 01       	movw	r18, r14
    15fc:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__udivmodsi4>
    1600:	21 50       	subi	r18, 0x01	; 1
    1602:	30 40       	sbci	r19, 0x00	; 0
    1604:	40 40       	sbci	r20, 0x00	; 0
    1606:	50 40       	sbci	r21, 0x00	; 0
    1608:	56 95       	lsr	r21
    160a:	47 95       	ror	r20
    160c:	37 95       	ror	r19
    160e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1610:	80 e1       	ldi	r24, 0x10	; 16
    1612:	20 30       	cpi	r18, 0x00	; 0
    1614:	38 07       	cpc	r19, r24
    1616:	20 f0       	brcs	.+8      	; 0x1620 <_ZN14HardwareSerial5beginEm+0x88>
    1618:	dd 20       	and	r13, r13
    161a:	11 f0       	breq	.+4      	; 0x1620 <_ZN14HardwareSerial5beginEm+0x88>
    161c:	dd 24       	eor	r13, r13
    161e:	d6 cf       	rjmp	.-84     	; 0x15cc <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1620:	e8 89       	ldd	r30, Y+16	; 0x10
    1622:	f9 89       	ldd	r31, Y+17	; 0x11
    1624:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1626:	ea 89       	ldd	r30, Y+18	; 0x12
    1628:	fb 89       	ldd	r31, Y+19	; 0x13
    162a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    162c:	ee 89       	ldd	r30, Y+22	; 0x16
    162e:	ff 89       	ldd	r31, Y+23	; 0x17
    1630:	40 81       	ld	r20, Z
    1632:	21 e0       	ldi	r18, 0x01	; 1
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	c9 01       	movw	r24, r18
    1638:	0a 8c       	ldd	r0, Y+26	; 0x1a
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <_ZN14HardwareSerial5beginEm+0xa8>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <_ZN14HardwareSerial5beginEm+0xa4>
    1644:	48 2b       	or	r20, r24
    1646:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1648:	ee 89       	ldd	r30, Y+22	; 0x16
    164a:	ff 89       	ldd	r31, Y+23	; 0x17
    164c:	40 81       	ld	r20, Z
    164e:	c9 01       	movw	r24, r18
    1650:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN14HardwareSerial5beginEm+0xc0>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <_ZN14HardwareSerial5beginEm+0xbc>
    165c:	48 2b       	or	r20, r24
    165e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1660:	ee 89       	ldd	r30, Y+22	; 0x16
    1662:	ff 89       	ldd	r31, Y+23	; 0x17
    1664:	40 81       	ld	r20, Z
    1666:	c9 01       	movw	r24, r18
    1668:	0c 8c       	ldd	r0, Y+28	; 0x1c
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <_ZN14HardwareSerial5beginEm+0xd8>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <_ZN14HardwareSerial5beginEm+0xd4>
    1674:	48 2b       	or	r20, r24
    1676:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1678:	ee 89       	ldd	r30, Y+22	; 0x16
    167a:	ff 89       	ldd	r31, Y+23	; 0x17
    167c:	80 81       	ld	r24, Z
    167e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <_ZN14HardwareSerial5beginEm+0xee>
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <_ZN14HardwareSerial5beginEm+0xea>
    168a:	20 95       	com	r18
    168c:	28 23       	and	r18, r24
    168e:	20 83       	st	Z, r18
}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	08 95       	ret

000016a4 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    16a4:	dc 01       	movw	r26, r24
    16a6:	1c 96       	adiw	r26, 0x0c	; 12
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	1d 97       	sbiw	r26, 0x0d	; 13
    16ae:	e0 5c       	subi	r30, 0xC0	; 192
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	21 91       	ld	r18, Z+
    16b4:	31 91       	ld	r19, Z+
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	28 1b       	sub	r18, r24
    16bc:	39 0b       	sbc	r19, r25
    16be:	2f 73       	andi	r18, 0x3F	; 63
    16c0:	30 70       	andi	r19, 0x00	; 0
}
    16c2:	c9 01       	movw	r24, r18
    16c4:	08 95       	ret

000016c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    16c6:	dc 01       	movw	r26, r24
    16c8:	1c 96       	adiw	r26, 0x0c	; 12
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	1d 97       	sbiw	r26, 0x0d	; 13
    16d0:	e0 5c       	subi	r30, 0xC0	; 192
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	20 81       	ld	r18, Z
    16d6:	31 81       	ldd	r19, Z+1	; 0x01
    16d8:	e0 54       	subi	r30, 0x40	; 64
    16da:	f0 40       	sbci	r31, 0x00	; 0
    16dc:	df 01       	movw	r26, r30
    16de:	ae 5b       	subi	r26, 0xBE	; 190
    16e0:	bf 4f       	sbci	r27, 0xFF	; 255
    16e2:	8d 91       	ld	r24, X+
    16e4:	9c 91       	ld	r25, X
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	19 f4       	brne	.+6      	; 0x16f4 <_ZN14HardwareSerial4peekEv+0x2e>
    16ee:	2f ef       	ldi	r18, 0xFF	; 255
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    16f4:	8d 91       	ld	r24, X+
    16f6:	9c 91       	ld	r25, X
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	80 81       	ld	r24, Z
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1702:	c9 01       	movw	r24, r18
    1704:	08 95       	ret

00001706 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1706:	dc 01       	movw	r26, r24
    1708:	1c 96       	adiw	r26, 0x0c	; 12
    170a:	ed 91       	ld	r30, X+
    170c:	fc 91       	ld	r31, X
    170e:	1d 97       	sbiw	r26, 0x0d	; 13
    1710:	e0 5c       	subi	r30, 0xC0	; 192
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	20 81       	ld	r18, Z
    1716:	31 81       	ldd	r19, Z+1	; 0x01
    1718:	e0 54       	subi	r30, 0x40	; 64
    171a:	f0 40       	sbci	r31, 0x00	; 0
    171c:	df 01       	movw	r26, r30
    171e:	ae 5b       	subi	r26, 0xBE	; 190
    1720:	bf 4f       	sbci	r27, 0xFF	; 255
    1722:	8d 91       	ld	r24, X+
    1724:	9c 91       	ld	r25, X
    1726:	11 97       	sbiw	r26, 0x01	; 1
    1728:	28 17       	cp	r18, r24
    172a:	39 07       	cpc	r19, r25
    172c:	19 f4       	brne	.+6      	; 0x1734 <_ZN14HardwareSerial4readEv+0x2e>
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	10 c0       	rjmp	.+32     	; 0x1754 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1734:	8d 91       	ld	r24, X+
    1736:	9c 91       	ld	r25, X
    1738:	11 97       	sbiw	r26, 0x01	; 1
    173a:	e8 0f       	add	r30, r24
    173c:	f9 1f       	adc	r31, r25
    173e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1740:	8d 91       	ld	r24, X+
    1742:	9c 91       	ld	r25, X
    1744:	11 97       	sbiw	r26, 0x01	; 1
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	8f 73       	andi	r24, 0x3F	; 63
    174a:	90 70       	andi	r25, 0x00	; 0
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	9c 93       	st	X, r25
    1750:	8e 93       	st	-X, r24
    return c;
    1752:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1754:	c9 01       	movw	r24, r18
    1756:	08 95       	ret

00001758 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1758:	fc 01       	movw	r30, r24
    175a:	86 85       	ldd	r24, Z+14	; 0x0e
    175c:	97 85       	ldd	r25, Z+15	; 0x0f
    175e:	dc 01       	movw	r26, r24
    1760:	a0 5c       	subi	r26, 0xC0	; 192
    1762:	bf 4f       	sbci	r27, 0xFF	; 255
    1764:	fc 01       	movw	r30, r24
    1766:	ee 5b       	subi	r30, 0xBE	; 190
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	2d 91       	ld	r18, X+
    176c:	3c 91       	ld	r19, X
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	c1 f7       	brne	.-16     	; 0x176a <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    177a:	08 95       	ret

0000177c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1782:	ee 85       	ldd	r30, Y+14	; 0x0e
    1784:	ff 85       	ldd	r31, Y+15	; 0x0f
    1786:	e0 5c       	subi	r30, 0xC0	; 192
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	20 81       	ld	r18, Z
    178c:	31 81       	ldd	r19, Z+1	; 0x01
    178e:	e0 54       	subi	r30, 0x40	; 64
    1790:	f0 40       	sbci	r31, 0x00	; 0
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	2f 73       	andi	r18, 0x3F	; 63
    1798:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    179a:	df 01       	movw	r26, r30
    179c:	ae 5b       	subi	r26, 0xBE	; 190
    179e:	bf 4f       	sbci	r27, 0xFF	; 255
    17a0:	8d 91       	ld	r24, X+
    17a2:	9c 91       	ld	r25, X
    17a4:	11 97       	sbiw	r26, 0x01	; 1
    17a6:	28 17       	cp	r18, r24
    17a8:	39 07       	cpc	r19, r25
    17aa:	d1 f3       	breq	.-12     	; 0x17a0 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    17ac:	e0 5c       	subi	r30, 0xC0	; 192
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	80 81       	ld	r24, Z
    17b2:	91 81       	ldd	r25, Z+1	; 0x01
    17b4:	e0 54       	subi	r30, 0x40	; 64
    17b6:	f0 40       	sbci	r31, 0x00	; 0
    17b8:	e8 0f       	add	r30, r24
    17ba:	f9 1f       	adc	r31, r25
    17bc:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    17be:	ee 85       	ldd	r30, Y+14	; 0x0e
    17c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    17c2:	e0 5c       	subi	r30, 0xC0	; 192
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	31 83       	std	Z+1, r19	; 0x01
    17c8:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    17ca:	ee 89       	ldd	r30, Y+22	; 0x16
    17cc:	ff 89       	ldd	r31, Y+23	; 0x17
    17ce:	20 81       	ld	r18, Z
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0d 8c       	ldd	r0, Y+29	; 0x1d
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <_ZN14HardwareSerial5writeEh+0x60>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <_ZN14HardwareSerial5writeEh+0x5c>
    17e0:	28 2b       	or	r18, r24
    17e2:	20 83       	st	Z, r18
  
  return 1;
}
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    17ee:	10 92 44 02 	sts	0x0244, r1
    17f2:	10 92 43 02 	sts	0x0243, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    17f6:	88 ee       	ldi	r24, 0xE8	; 232
    17f8:	93 e0       	ldi	r25, 0x03	; 3
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	80 93 45 02 	sts	0x0245, r24
    1802:	90 93 46 02 	sts	0x0246, r25
    1806:	a0 93 47 02 	sts	0x0247, r26
    180a:	b0 93 48 02 	sts	0x0248, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    180e:	80 e5       	ldi	r24, 0x50	; 80
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	90 93 42 02 	sts	0x0242, r25
    1816:	80 93 41 02 	sts	0x0241, r24
{
  _rx_buffer = rx_buffer;
    181a:	89 eb       	ldi	r24, 0xB9	; 185
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	90 93 4e 02 	sts	0x024E, r25
    1822:	80 93 4d 02 	sts	0x024D, r24
  _tx_buffer = tx_buffer;
    1826:	8d ef       	ldi	r24, 0xFD	; 253
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	90 93 50 02 	sts	0x0250, r25
    182e:	80 93 4f 02 	sts	0x024F, r24
  _ubrrh = ubrrh;
    1832:	85 ec       	ldi	r24, 0xC5	; 197
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	90 93 52 02 	sts	0x0252, r25
    183a:	80 93 51 02 	sts	0x0251, r24
  _ubrrl = ubrrl;
    183e:	84 ec       	ldi	r24, 0xC4	; 196
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	90 93 54 02 	sts	0x0254, r25
    1846:	80 93 53 02 	sts	0x0253, r24
  _ucsra = ucsra;
    184a:	80 ec       	ldi	r24, 0xC0	; 192
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	90 93 56 02 	sts	0x0256, r25
    1852:	80 93 55 02 	sts	0x0255, r24
  _ucsrb = ucsrb;
    1856:	81 ec       	ldi	r24, 0xC1	; 193
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	90 93 58 02 	sts	0x0258, r25
    185e:	80 93 57 02 	sts	0x0257, r24
  _udr = udr;
    1862:	86 ec       	ldi	r24, 0xC6	; 198
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	90 93 5a 02 	sts	0x025A, r25
    186a:	80 93 59 02 	sts	0x0259, r24
  _rxen = rxen;
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	80 93 5b 02 	sts	0x025B, r24
  _txen = txen;
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	80 93 5c 02 	sts	0x025C, r24
  _rxcie = rxcie;
    187a:	87 e0       	ldi	r24, 0x07	; 7
    187c:	80 93 5d 02 	sts	0x025D, r24
  _udrie = udrie;
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	80 93 5e 02 	sts	0x025E, r24
  _u2x = u2x;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	80 93 5f 02 	sts	0x025F, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    188c:	08 95       	ret

0000188e <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	7c 01       	movw	r14, r24
    18a0:	6b 01       	movw	r12, r22
    18a2:	8a 01       	movw	r16, r20
    18a4:	c0 e0       	ldi	r28, 0x00	; 0
    18a6:	d0 e0       	ldi	r29, 0x00	; 0
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    18aa:	d6 01       	movw	r26, r12
    18ac:	6d 91       	ld	r22, X+
    18ae:	6d 01       	movw	r12, r26
    18b0:	d7 01       	movw	r26, r14
    18b2:	ed 91       	ld	r30, X+
    18b4:	fc 91       	ld	r31, X
    18b6:	01 90       	ld	r0, Z+
    18b8:	f0 81       	ld	r31, Z
    18ba:	e0 2d       	mov	r30, r0
    18bc:	c7 01       	movw	r24, r14
    18be:	09 95       	icall
    18c0:	c8 0f       	add	r28, r24
    18c2:	d9 1f       	adc	r29, r25
    18c4:	01 50       	subi	r16, 0x01	; 1
    18c6:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    18c8:	01 15       	cp	r16, r1
    18ca:	11 05       	cpc	r17, r1
    18cc:	71 f7       	brne	.-36     	; 0x18aa <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    18ce:	ce 01       	movw	r24, r28
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	08 95       	ret

000018e2 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    18ec:	dc 01       	movw	r26, r24
    18ee:	ed 91       	ld	r30, X+
    18f0:	fc 91       	ld	r31, X
    18f2:	01 90       	ld	r0, Z+
    18f4:	f0 81       	ld	r31, Z
    18f6:	e0 2d       	mov	r30, r0
    18f8:	6d e0       	ldi	r22, 0x0D	; 13
    18fa:	09 95       	icall
    18fc:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    18fe:	d8 01       	movw	r26, r16
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	01 90       	ld	r0, Z+
    1906:	f0 81       	ld	r31, Z
    1908:	e0 2d       	mov	r30, r0
    190a:	c8 01       	movw	r24, r16
    190c:	6a e0       	ldi	r22, 0x0A	; 10
    190e:	09 95       	icall
    1910:	9c 01       	movw	r18, r24
    1912:	2e 0d       	add	r18, r14
    1914:	3f 1d       	adc	r19, r15
    1916:	c9 01       	movw	r24, r18
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1922:	4f 92       	push	r4
    1924:	5f 92       	push	r5
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	a1 97       	sbiw	r28, 0x21	; 33
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	2c 01       	movw	r4, r24
    1952:	74 2e       	mov	r7, r20
    1954:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	08 f4       	brcc	.+2      	; 0x195c <_ZN5Print11printNumberEmh+0x3a>
    195a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    195c:	19 a2       	std	Y+33, r1	; 0x21
    195e:	31 e2       	ldi	r19, 0x21	; 33
    1960:	c3 2e       	mov	r12, r19
    1962:	d1 2c       	mov	r13, r1
    1964:	cc 0e       	add	r12, r28
    1966:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1968:	82 2e       	mov	r8, r18
    196a:	99 24       	eor	r9, r9
    196c:	aa 24       	eor	r10, r10
    196e:	bb 24       	eor	r11, r11
    1970:	67 2d       	mov	r22, r7
    1972:	75 2f       	mov	r23, r21
    1974:	a5 01       	movw	r20, r10
    1976:	94 01       	movw	r18, r8
    1978:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__udivmodsi4>
    197c:	79 01       	movw	r14, r18
    197e:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a5 01       	movw	r20, r10
    1986:	94 01       	movw	r18, r8
    1988:	0e 94 22 13 	call	0x2644	; 0x2644 <__mulsi3>
    198c:	47 2d       	mov	r20, r7
    198e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1990:	08 94       	sec
    1992:	c1 08       	sbc	r12, r1
    1994:	d1 08       	sbc	r13, r1
    1996:	4a 30       	cpi	r20, 0x0A	; 10
    1998:	14 f4       	brge	.+4      	; 0x199e <_ZN5Print11printNumberEmh+0x7c>
    199a:	40 5d       	subi	r20, 0xD0	; 208
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <_ZN5Print11printNumberEmh+0x7e>
    199e:	49 5c       	subi	r20, 0xC9	; 201
    19a0:	f6 01       	movw	r30, r12
    19a2:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    19a4:	e1 14       	cp	r14, r1
    19a6:	f1 04       	cpc	r15, r1
    19a8:	01 05       	cpc	r16, r1
    19aa:	11 05       	cpc	r17, r1
    19ac:	21 f0       	breq	.+8      	; 0x19b6 <_ZN5Print11printNumberEmh+0x94>
    19ae:	7e 2c       	mov	r7, r14
    19b0:	5f 2d       	mov	r21, r15
    19b2:	c8 01       	movw	r24, r16
    19b4:	dd cf       	rjmp	.-70     	; 0x1970 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    19b6:	c2 01       	movw	r24, r4
    19b8:	b6 01       	movw	r22, r12
    19ba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
}
    19be:	a1 96       	adiw	r28, 0x21	; 33
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	5f 90       	pop	r5
    19e6:	4f 90       	pop	r4
    19e8:	08 95       	ret

000019ea <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	6a 01       	movw	r12, r20
    19fe:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	41 f4       	brne	.+16     	; 0x1a16 <_ZN5Print5printEli+0x2c>
    return write(n);
    1a06:	e8 81       	ld	r30, Y
    1a08:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0a:	01 90       	ld	r0, Z+
    1a0c:	f0 81       	ld	r31, Z
    1a0e:	e0 2d       	mov	r30, r0
    1a10:	64 2f       	mov	r22, r20
    1a12:	09 95       	icall
    1a14:	1f c0       	rjmp	.+62     	; 0x1a54 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    1a16:	2a 30       	cpi	r18, 0x0A	; 10
    1a18:	31 05       	cpc	r19, r1
    1a1a:	d1 f4       	brne	.+52     	; 0x1a50 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    1a1c:	77 ff       	sbrs	r23, 7
    1a1e:	17 c0       	rjmp	.+46     	; 0x1a4e <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1a20:	e8 81       	ld	r30, Y
    1a22:	f9 81       	ldd	r31, Y+1	; 0x01
    1a24:	01 90       	ld	r0, Z+
    1a26:	f0 81       	ld	r31, Z
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	6d e2       	ldi	r22, 0x2D	; 45
    1a2c:	09 95       	icall
    1a2e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1a30:	44 27       	eor	r20, r20
    1a32:	55 27       	eor	r21, r21
    1a34:	ba 01       	movw	r22, r20
    1a36:	4c 19       	sub	r20, r12
    1a38:	5d 09       	sbc	r21, r13
    1a3a:	6e 09       	sbc	r22, r14
    1a3c:	7f 09       	sbc	r23, r15
    1a3e:	ce 01       	movw	r24, r28
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN5Print11printNumberEmh>
    1a46:	98 01       	movw	r18, r16
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1a4e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1a50:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN5Print11printNumberEmh>
    1a54:	9c 01       	movw	r18, r24
  }
}
    1a56:	c9 01       	movw	r24, r18
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	08 95       	ret

00001a6a <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	7b 01       	movw	r14, r22
    1a74:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    1a76:	00 27       	eor	r16, r16
    1a78:	f7 fc       	sbrc	r15, 7
    1a7a:	00 95       	com	r16
    1a7c:	10 2f       	mov	r17, r16
    1a7e:	b8 01       	movw	r22, r16
    1a80:	a7 01       	movw	r20, r14
    1a82:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN5Print5printEli>
}
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret

00001a90 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1a90:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
}
    1a94:	08 95       	ret

00001a96 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1aa0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5Print5writeEPKc>
    1aa4:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN5Print7printlnEv>
    1aac:	08 0f       	add	r16, r24
    1aae:	19 1f       	adc	r17, r25
  return n;
}
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	08 95       	ret

00001abc <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    1abc:	2f 92       	push	r2
    1abe:	3f 92       	push	r3
    1ac0:	4f 92       	push	r4
    1ac2:	5f 92       	push	r5
    1ac4:	6f 92       	push	r6
    1ac6:	7f 92       	push	r7
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	3b 01       	movw	r6, r22
    1ae6:	4c 01       	movw	r8, r24
    1ae8:	19 01       	movw	r2, r18
    1aea:	2a 01       	movw	r4, r20
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8f 89       	ldd	r24, Y+23	; 0x17
    1af2:	98 8d       	ldd	r25, Y+24	; 0x18
    1af4:	6a 19       	sub	r22, r10
    1af6:	7b 09       	sbc	r23, r11
    1af8:	8c 09       	sbc	r24, r12
    1afa:	9d 09       	sbc	r25, r13
    1afc:	62 1a       	sub	r6, r18
    1afe:	73 0a       	sbc	r7, r19
    1b00:	84 0a       	sbc	r8, r20
    1b02:	95 0a       	sbc	r9, r21
    1b04:	a4 01       	movw	r20, r8
    1b06:	93 01       	movw	r18, r6
    1b08:	0e 94 22 13 	call	0x2644	; 0x2644 <__mulsi3>
    1b0c:	e2 18       	sub	r14, r2
    1b0e:	f3 08       	sbc	r15, r3
    1b10:	04 09       	sbc	r16, r4
    1b12:	15 09       	sbc	r17, r5
    1b14:	a8 01       	movw	r20, r16
    1b16:	97 01       	movw	r18, r14
    1b18:	0e 94 82 13 	call	0x2704	; 0x2704 <__divmodsi4>
    1b1c:	2a 0d       	add	r18, r10
    1b1e:	3b 1d       	adc	r19, r11
    1b20:	4c 1d       	adc	r20, r12
    1b22:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1b24:	b9 01       	movw	r22, r18
    1b26:	ca 01       	movw	r24, r20
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	df 90       	pop	r13
    1b36:	cf 90       	pop	r12
    1b38:	bf 90       	pop	r11
    1b3a:	af 90       	pop	r10
    1b3c:	9f 90       	pop	r9
    1b3e:	8f 90       	pop	r8
    1b40:	7f 90       	pop	r7
    1b42:	6f 90       	pop	r6
    1b44:	5f 90       	pop	r5
    1b46:	4f 90       	pop	r4
    1b48:	3f 90       	pop	r3
    1b4a:	2f 90       	pop	r2
    1b4c:	08 95       	ret

00001b4e <main>:
#include <Arduino.h>

int main(void)
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
{
	init();
    1b52:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1b56:	0e 94 ff 09 	call	0x13fe	; 0x13fe <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1b5a:	ce e7       	ldi	r28, 0x7E	; 126
    1b5c:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    1b5e:	0e 94 a2 07 	call	0xf44	; 0xf44 <loop>
		if (serialEventRun) serialEventRun();
    1b62:	20 97       	sbiw	r28, 0x00	; 0
    1b64:	e1 f3       	breq	.-8      	; 0x1b5e <main+0x10>
    1b66:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_Z14serialEventRunv>
    1b6a:	f9 cf       	rjmp	.-14     	; 0x1b5e <main+0x10>

00001b6c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	af 93       	push	r26
    1b80:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1b82:	80 91 64 02 	lds	r24, 0x0264
    1b86:	90 91 65 02 	lds	r25, 0x0265
    1b8a:	a0 91 66 02 	lds	r26, 0x0266
    1b8e:	b0 91 67 02 	lds	r27, 0x0267
	unsigned char f = timer0_fract;
    1b92:	30 91 68 02 	lds	r19, 0x0268

	m += MILLIS_INC;
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	a1 1d       	adc	r26, r1
    1b9a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1b9c:	23 2f       	mov	r18, r19
    1b9e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1ba0:	2d 37       	cpi	r18, 0x7D	; 125
    1ba2:	20 f0       	brcs	.+8      	; 0x1bac <__vector_16+0x40>
		f -= FRACT_MAX;
    1ba4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	a1 1d       	adc	r26, r1
    1baa:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1bac:	20 93 68 02 	sts	0x0268, r18
	timer0_millis = m;
    1bb0:	80 93 64 02 	sts	0x0264, r24
    1bb4:	90 93 65 02 	sts	0x0265, r25
    1bb8:	a0 93 66 02 	sts	0x0266, r26
    1bbc:	b0 93 67 02 	sts	0x0267, r27
	timer0_overflow_count++;
    1bc0:	80 91 60 02 	lds	r24, 0x0260
    1bc4:	90 91 61 02 	lds	r25, 0x0261
    1bc8:	a0 91 62 02 	lds	r26, 0x0262
    1bcc:	b0 91 63 02 	lds	r27, 0x0263
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	b1 1d       	adc	r27, r1
    1bd6:	80 93 60 02 	sts	0x0260, r24
    1bda:	90 93 61 02 	sts	0x0261, r25
    1bde:	a0 93 62 02 	sts	0x0262, r26
    1be2:	b0 93 63 02 	sts	0x0263, r27
}
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1c00:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1c02:	f8 94       	cli
	m = timer0_overflow_count;
    1c04:	80 91 60 02 	lds	r24, 0x0260
    1c08:	90 91 61 02 	lds	r25, 0x0261
    1c0c:	a0 91 62 02 	lds	r26, 0x0262
    1c10:	b0 91 63 02 	lds	r27, 0x0263
#if defined(TCNT0)
	t = TCNT0;
    1c14:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1c16:	a8 9b       	sbis	0x15, 0	; 21
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <delay+0x28>
    1c1a:	6f 3f       	cpi	r22, 0xFF	; 255
    1c1c:	19 f0       	breq	.+6      	; 0x1c24 <delay+0x28>
		m++;
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	a1 1d       	adc	r26, r1
    1c22:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1c24:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1c26:	ba 2f       	mov	r27, r26
    1c28:	a9 2f       	mov	r26, r25
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	88 27       	eor	r24, r24
    1c2e:	86 0f       	add	r24, r22
    1c30:	91 1d       	adc	r25, r1
    1c32:	a1 1d       	adc	r26, r1
    1c34:	b1 1d       	adc	r27, r1
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	aa 1f       	adc	r26, r26
    1c3e:	bb 1f       	adc	r27, r27
    1c40:	6a 95       	dec	r22
    1c42:	d1 f7       	brne	.-12     	; 0x1c38 <delay+0x3c>
    1c44:	bc 01       	movw	r22, r24
    1c46:	2d c0       	rjmp	.+90     	; 0x1ca2 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1c48:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1c4a:	f8 94       	cli
	m = timer0_overflow_count;
    1c4c:	80 91 60 02 	lds	r24, 0x0260
    1c50:	90 91 61 02 	lds	r25, 0x0261
    1c54:	a0 91 62 02 	lds	r26, 0x0262
    1c58:	b0 91 63 02 	lds	r27, 0x0263
#if defined(TCNT0)
	t = TCNT0;
    1c5c:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1c5e:	a8 9b       	sbis	0x15, 0	; 21
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <delay+0x70>
    1c62:	ef 3f       	cpi	r30, 0xFF	; 255
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <delay+0x70>
		m++;
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1c6c:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1c6e:	ba 2f       	mov	r27, r26
    1c70:	a9 2f       	mov	r26, r25
    1c72:	98 2f       	mov	r25, r24
    1c74:	88 27       	eor	r24, r24
    1c76:	8e 0f       	add	r24, r30
    1c78:	91 1d       	adc	r25, r1
    1c7a:	a1 1d       	adc	r26, r1
    1c7c:	b1 1d       	adc	r27, r1
    1c7e:	e2 e0       	ldi	r30, 0x02	; 2
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	aa 1f       	adc	r26, r26
    1c86:	bb 1f       	adc	r27, r27
    1c88:	ea 95       	dec	r30
    1c8a:	d1 f7       	brne	.-12     	; 0x1c80 <delay+0x84>
    1c8c:	86 1b       	sub	r24, r22
    1c8e:	97 0b       	sbc	r25, r23
    1c90:	88 5e       	subi	r24, 0xE8	; 232
    1c92:	93 40       	sbci	r25, 0x03	; 3
    1c94:	c8 f2       	brcs	.-78     	; 0x1c48 <delay+0x4c>
			ms--;
    1c96:	21 50       	subi	r18, 0x01	; 1
    1c98:	30 40       	sbci	r19, 0x00	; 0
    1c9a:	40 40       	sbci	r20, 0x00	; 0
    1c9c:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1c9e:	68 51       	subi	r22, 0x18	; 24
    1ca0:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1ca2:	21 15       	cp	r18, r1
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	41 05       	cpc	r20, r1
    1ca8:	51 05       	cpc	r21, r1
    1caa:	71 f6       	brne	.-100    	; 0x1c48 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1cac:	08 95       	ret

00001cae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	39 f0       	breq	.+14     	; 0x1cc0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1cba:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <delayMicroseconds+0xe>
    1cc0:	08 95       	ret

00001cc2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1cc2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1cc4:	84 b5       	in	r24, 0x24	; 36
    1cc6:	82 60       	ori	r24, 0x02	; 2
    1cc8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1cca:	84 b5       	in	r24, 0x24	; 36
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1cd0:	85 b5       	in	r24, 0x25	; 37
    1cd2:	82 60       	ori	r24, 0x02	; 2
    1cd4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1cd6:	85 b5       	in	r24, 0x25	; 37
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1cdc:	ee e6       	ldi	r30, 0x6E	; 110
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1ce6:	e1 e8       	ldi	r30, 0x81	; 129
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1cf2:	80 81       	ld	r24, Z
    1cf4:	81 60       	ori	r24, 0x01	; 1
    1cf6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1cf8:	e0 e8       	ldi	r30, 0x80	; 128
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	81 60       	ori	r24, 0x01	; 1
    1d00:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1d02:	e1 eb       	ldi	r30, 0xB1	; 177
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	84 60       	ori	r24, 0x04	; 4
    1d0a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1d0c:	e0 eb       	ldi	r30, 0xB0	; 176
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	81 60       	ori	r24, 0x01	; 1
    1d14:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1d16:	ea e7       	ldi	r30, 0x7A	; 122
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	84 60       	ori	r24, 0x04	; 4
    1d1e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1d20:	80 81       	ld	r24, Z
    1d22:	82 60       	ori	r24, 0x02	; 2
    1d24:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1d26:	80 81       	ld	r24, Z
    1d28:	81 60       	ori	r24, 0x01	; 1
    1d2a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 68       	ori	r24, 0x80	; 128
    1d30:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1d32:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1d36:	08 95       	ret

00001d38 <analogRead>:

int analogRead(uint8_t pin)
{
    1d38:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1d3a:	8e 30       	cpi	r24, 0x0E	; 14
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <analogRead+0x8>
    1d3e:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1d40:	97 70       	andi	r25, 0x07	; 7
    1d42:	80 91 3b 01 	lds	r24, 0x013B
    1d46:	82 95       	swap	r24
    1d48:	88 0f       	add	r24, r24
    1d4a:	88 0f       	add	r24, r24
    1d4c:	80 7c       	andi	r24, 0xC0	; 192
    1d4e:	89 2b       	or	r24, r25
    1d50:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1d54:	80 91 7a 00 	lds	r24, 0x007A
    1d58:	80 64       	ori	r24, 0x40	; 64
    1d5a:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1d5e:	80 91 7a 00 	lds	r24, 0x007A
    1d62:	86 fd       	sbrc	r24, 6
    1d64:	fc cf       	rjmp	.-8      	; 0x1d5e <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1d66:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1d6a:	40 91 79 00 	lds	r20, 0x0079
    1d6e:	94 2f       	mov	r25, r20
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	28 2b       	or	r18, r24
    1d76:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1d78:	c9 01       	movw	r24, r18
    1d7a:	08 95       	ret

00001d7c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1d80:	48 2f       	mov	r20, r24
    1d82:	50 e0       	ldi	r21, 0x00	; 0
    1d84:	ca 01       	movw	r24, r20
    1d86:	84 5e       	subi	r24, 0xE4	; 228
    1d88:	9e 4f       	sbci	r25, 0xFE	; 254
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    1d8e:	48 5f       	subi	r20, 0xF8	; 248
    1d90:	5e 4f       	sbci	r21, 0xFE	; 254
    1d92:	fa 01       	movw	r30, r20
    1d94:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1d96:	88 23       	and	r24, r24
    1d98:	69 f1       	breq	.+90     	; 0x1df4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	fc 01       	movw	r30, r24
    1da2:	e6 51       	subi	r30, 0x16	; 22
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	a5 91       	lpm	r26, Z+
    1da8:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    1daa:	fc 01       	movw	r30, r24
    1dac:	ec 50       	subi	r30, 0x0C	; 12
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	c5 91       	lpm	r28, Z+
    1db2:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    1db4:	66 23       	and	r22, r22
    1db6:	51 f4       	brne	.+20     	; 0x1dcc <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1db8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1dba:	f8 94       	cli
		*reg &= ~bit;
    1dbc:	8c 91       	ld	r24, X
    1dbe:	93 2f       	mov	r25, r19
    1dc0:	90 95       	com	r25
    1dc2:	89 23       	and	r24, r25
    1dc4:	8c 93       	st	X, r24
		*out &= ~bit;
    1dc6:	88 81       	ld	r24, Y
    1dc8:	89 23       	and	r24, r25
    1dca:	0b c0       	rjmp	.+22     	; 0x1de2 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1dcc:	62 30       	cpi	r22, 0x02	; 2
    1dce:	61 f4       	brne	.+24     	; 0x1de8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1dd0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1dd2:	f8 94       	cli
		*reg &= ~bit;
    1dd4:	8c 91       	ld	r24, X
    1dd6:	93 2f       	mov	r25, r19
    1dd8:	90 95       	com	r25
    1dda:	89 23       	and	r24, r25
    1ddc:	8c 93       	st	X, r24
		*out |= bit;
    1dde:	88 81       	ld	r24, Y
    1de0:	83 2b       	or	r24, r19
    1de2:	88 83       	st	Y, r24
		SREG = oldSREG;
    1de4:	2f bf       	out	0x3f, r18	; 63
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1de8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1dea:	f8 94       	cli
		*reg |= bit;
    1dec:	8c 91       	ld	r24, X
    1dee:	83 2b       	or	r24, r19
    1df0:	8c 93       	st	X, r24
		SREG = oldSREG;
    1df2:	9f bf       	out	0x3f, r25	; 63
	}
}
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	ca 01       	movw	r24, r20
    1e00:	80 5d       	subi	r24, 0xD0	; 208
    1e02:	9e 4f       	sbci	r25, 0xFE	; 254
    1e04:	fc 01       	movw	r30, r24
    1e06:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1e08:	ca 01       	movw	r24, r20
    1e0a:	84 5e       	subi	r24, 0xE4	; 228
    1e0c:	9e 4f       	sbci	r25, 0xFE	; 254
    1e0e:	fc 01       	movw	r30, r24
    1e10:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1e12:	48 5f       	subi	r20, 0xF8	; 248
    1e14:	5e 4f       	sbci	r21, 0xFE	; 254
    1e16:	fa 01       	movw	r30, r20
    1e18:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1e1a:	33 23       	and	r19, r19
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <digitalWrite+0x26>
    1e1e:	40 c0       	rjmp	.+128    	; 0x1ea0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1e20:	22 23       	and	r18, r18
    1e22:	51 f1       	breq	.+84     	; 0x1e78 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1e24:	23 30       	cpi	r18, 0x03	; 3
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <digitalWrite+0x4a>
    1e28:	24 30       	cpi	r18, 0x04	; 4
    1e2a:	28 f4       	brcc	.+10     	; 0x1e36 <digitalWrite+0x3c>
    1e2c:	21 30       	cpi	r18, 0x01	; 1
    1e2e:	a1 f0       	breq	.+40     	; 0x1e58 <digitalWrite+0x5e>
    1e30:	22 30       	cpi	r18, 0x02	; 2
    1e32:	11 f5       	brne	.+68     	; 0x1e78 <digitalWrite+0x7e>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <digitalWrite+0x64>
    1e36:	26 30       	cpi	r18, 0x06	; 6
    1e38:	b1 f0       	breq	.+44     	; 0x1e66 <digitalWrite+0x6c>
    1e3a:	27 30       	cpi	r18, 0x07	; 7
    1e3c:	c1 f0       	breq	.+48     	; 0x1e6e <digitalWrite+0x74>
    1e3e:	24 30       	cpi	r18, 0x04	; 4
    1e40:	d9 f4       	brne	.+54     	; 0x1e78 <digitalWrite+0x7e>
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1e44:	80 91 80 00 	lds	r24, 0x0080
    1e48:	8f 77       	andi	r24, 0x7F	; 127
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1e4c:	80 91 80 00 	lds	r24, 0x0080
    1e50:	8f 7d       	andi	r24, 0xDF	; 223
    1e52:	80 93 80 00 	sts	0x0080, r24
    1e56:	10 c0       	rjmp	.+32     	; 0x1e78 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1e58:	84 b5       	in	r24, 0x24	; 36
    1e5a:	8f 77       	andi	r24, 0x7F	; 127
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1e5e:	84 b5       	in	r24, 0x24	; 36
    1e60:	8f 7d       	andi	r24, 0xDF	; 223
    1e62:	84 bd       	out	0x24, r24	; 36
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1e66:	80 91 b0 00 	lds	r24, 0x00B0
    1e6a:	8f 77       	andi	r24, 0x7F	; 127
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1e6e:	80 91 b0 00 	lds	r24, 0x00B0
    1e72:	8f 7d       	andi	r24, 0xDF	; 223
    1e74:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1e78:	e3 2f       	mov	r30, r19
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ec 50       	subi	r30, 0x0C	; 12
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	a5 91       	lpm	r26, Z+
    1e86:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1e88:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1e8a:	f8 94       	cli

	if (val == LOW) {
    1e8c:	66 23       	and	r22, r22
    1e8e:	21 f4       	brne	.+8      	; 0x1e98 <digitalWrite+0x9e>
		*out &= ~bit;
    1e90:	8c 91       	ld	r24, X
    1e92:	90 95       	com	r25
    1e94:	89 23       	and	r24, r25
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1e98:	8c 91       	ld	r24, X
    1e9a:	89 2b       	or	r24, r25
    1e9c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1e9e:	2f bf       	out	0x3f, r18	; 63
    1ea0:	08 95       	ret

00001ea2 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1ea2:	68 2f       	mov	r22, r24
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	80 5d       	subi	r24, 0xD0	; 208
    1eaa:	9e 4f       	sbci	r25, 0xFE	; 254
    1eac:	fc 01       	movw	r30, r24
    1eae:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	84 5e       	subi	r24, 0xE4	; 228
    1eb4:	9e 4f       	sbci	r25, 0xFE	; 254
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1eba:	68 5f       	subi	r22, 0xF8	; 248
    1ebc:	7e 4f       	sbci	r23, 0xFE	; 254
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1ec2:	99 23       	and	r25, r25
    1ec4:	19 f4       	brne	.+6      	; 0x1ecc <digitalRead+0x2a>
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3c c0       	rjmp	.+120    	; 0x1f44 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ecc:	22 23       	and	r18, r18
    1ece:	51 f1       	breq	.+84     	; 0x1f24 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ed0:	23 30       	cpi	r18, 0x03	; 3
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <digitalRead+0x4e>
    1ed4:	24 30       	cpi	r18, 0x04	; 4
    1ed6:	28 f4       	brcc	.+10     	; 0x1ee2 <digitalRead+0x40>
    1ed8:	21 30       	cpi	r18, 0x01	; 1
    1eda:	a1 f0       	breq	.+40     	; 0x1f04 <digitalRead+0x62>
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	11 f5       	brne	.+68     	; 0x1f24 <digitalRead+0x82>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <digitalRead+0x68>
    1ee2:	26 30       	cpi	r18, 0x06	; 6
    1ee4:	b1 f0       	breq	.+44     	; 0x1f12 <digitalRead+0x70>
    1ee6:	27 30       	cpi	r18, 0x07	; 7
    1ee8:	c1 f0       	breq	.+48     	; 0x1f1a <digitalRead+0x78>
    1eea:	24 30       	cpi	r18, 0x04	; 4
    1eec:	d9 f4       	brne	.+54     	; 0x1f24 <digitalRead+0x82>
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1ef0:	80 91 80 00 	lds	r24, 0x0080
    1ef4:	8f 77       	andi	r24, 0x7F	; 127
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1ef8:	80 91 80 00 	lds	r24, 0x0080
    1efc:	8f 7d       	andi	r24, 0xDF	; 223
    1efe:	80 93 80 00 	sts	0x0080, r24
    1f02:	10 c0       	rjmp	.+32     	; 0x1f24 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f04:	84 b5       	in	r24, 0x24	; 36
    1f06:	8f 77       	andi	r24, 0x7F	; 127
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1f0a:	84 b5       	in	r24, 0x24	; 36
    1f0c:	8f 7d       	andi	r24, 0xDF	; 223
    1f0e:	84 bd       	out	0x24, r24	; 36
    1f10:	09 c0       	rjmp	.+18     	; 0x1f24 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1f12:	80 91 b0 00 	lds	r24, 0x00B0
    1f16:	8f 77       	andi	r24, 0x7F	; 127
    1f18:	03 c0       	rjmp	.+6      	; 0x1f20 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1f1a:	80 91 b0 00 	lds	r24, 0x00B0
    1f1e:	8f 7d       	andi	r24, 0xDF	; 223
    1f20:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1f24:	89 2f       	mov	r24, r25
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	82 50       	subi	r24, 0x02	; 2
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	fc 01       	movw	r30, r24
    1f32:	a5 91       	lpm	r26, Z+
    1f34:	b4 91       	lpm	r27, Z+
    1f36:	8c 91       	ld	r24, X
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	84 23       	and	r24, r20
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <digitalRead+0xa2>
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1f44:	c9 01       	movw	r24, r18
    1f46:	08 95       	ret

00001f48 <__subsf3>:
    1f48:	50 58       	subi	r21, 0x80	; 128

00001f4a <__addsf3>:
    1f4a:	bb 27       	eor	r27, r27
    1f4c:	aa 27       	eor	r26, r26
    1f4e:	0e d0       	rcall	.+28     	; 0x1f6c <__addsf3x>
    1f50:	75 c1       	rjmp	.+746    	; 0x223c <__fp_round>
    1f52:	66 d1       	rcall	.+716    	; 0x2220 <__fp_pscA>
    1f54:	30 f0       	brcs	.+12     	; 0x1f62 <__addsf3+0x18>
    1f56:	6b d1       	rcall	.+726    	; 0x222e <__fp_pscB>
    1f58:	20 f0       	brcs	.+8      	; 0x1f62 <__addsf3+0x18>
    1f5a:	31 f4       	brne	.+12     	; 0x1f68 <__addsf3+0x1e>
    1f5c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <__addsf3+0x1a>
    1f60:	1e f4       	brtc	.+6      	; 0x1f68 <__addsf3+0x1e>
    1f62:	5b c1       	rjmp	.+694    	; 0x221a <__fp_nan>
    1f64:	0e f4       	brtc	.+2      	; 0x1f68 <__addsf3+0x1e>
    1f66:	e0 95       	com	r30
    1f68:	e7 fb       	bst	r30, 7
    1f6a:	51 c1       	rjmp	.+674    	; 0x220e <__fp_inf>

00001f6c <__addsf3x>:
    1f6c:	e9 2f       	mov	r30, r25
    1f6e:	77 d1       	rcall	.+750    	; 0x225e <__fp_split3>
    1f70:	80 f3       	brcs	.-32     	; 0x1f52 <__addsf3+0x8>
    1f72:	ba 17       	cp	r27, r26
    1f74:	62 07       	cpc	r22, r18
    1f76:	73 07       	cpc	r23, r19
    1f78:	84 07       	cpc	r24, r20
    1f7a:	95 07       	cpc	r25, r21
    1f7c:	18 f0       	brcs	.+6      	; 0x1f84 <__addsf3x+0x18>
    1f7e:	71 f4       	brne	.+28     	; 0x1f9c <__addsf3x+0x30>
    1f80:	9e f5       	brtc	.+102    	; 0x1fe8 <__addsf3x+0x7c>
    1f82:	8f c1       	rjmp	.+798    	; 0x22a2 <__fp_zero>
    1f84:	0e f4       	brtc	.+2      	; 0x1f88 <__addsf3x+0x1c>
    1f86:	e0 95       	com	r30
    1f88:	0b 2e       	mov	r0, r27
    1f8a:	ba 2f       	mov	r27, r26
    1f8c:	a0 2d       	mov	r26, r0
    1f8e:	0b 01       	movw	r0, r22
    1f90:	b9 01       	movw	r22, r18
    1f92:	90 01       	movw	r18, r0
    1f94:	0c 01       	movw	r0, r24
    1f96:	ca 01       	movw	r24, r20
    1f98:	a0 01       	movw	r20, r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	ff 27       	eor	r31, r31
    1f9e:	59 1b       	sub	r21, r25
    1fa0:	99 f0       	breq	.+38     	; 0x1fc8 <__addsf3x+0x5c>
    1fa2:	59 3f       	cpi	r21, 0xF9	; 249
    1fa4:	50 f4       	brcc	.+20     	; 0x1fba <__addsf3x+0x4e>
    1fa6:	50 3e       	cpi	r21, 0xE0	; 224
    1fa8:	68 f1       	brcs	.+90     	; 0x2004 <__addsf3x+0x98>
    1faa:	1a 16       	cp	r1, r26
    1fac:	f0 40       	sbci	r31, 0x00	; 0
    1fae:	a2 2f       	mov	r26, r18
    1fb0:	23 2f       	mov	r18, r19
    1fb2:	34 2f       	mov	r19, r20
    1fb4:	44 27       	eor	r20, r20
    1fb6:	58 5f       	subi	r21, 0xF8	; 248
    1fb8:	f3 cf       	rjmp	.-26     	; 0x1fa0 <__addsf3x+0x34>
    1fba:	46 95       	lsr	r20
    1fbc:	37 95       	ror	r19
    1fbe:	27 95       	ror	r18
    1fc0:	a7 95       	ror	r26
    1fc2:	f0 40       	sbci	r31, 0x00	; 0
    1fc4:	53 95       	inc	r21
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <__addsf3x+0x4e>
    1fc8:	7e f4       	brtc	.+30     	; 0x1fe8 <__addsf3x+0x7c>
    1fca:	1f 16       	cp	r1, r31
    1fcc:	ba 0b       	sbc	r27, r26
    1fce:	62 0b       	sbc	r22, r18
    1fd0:	73 0b       	sbc	r23, r19
    1fd2:	84 0b       	sbc	r24, r20
    1fd4:	ba f0       	brmi	.+46     	; 0x2004 <__addsf3x+0x98>
    1fd6:	91 50       	subi	r25, 0x01	; 1
    1fd8:	a1 f0       	breq	.+40     	; 0x2002 <__addsf3x+0x96>
    1fda:	ff 0f       	add	r31, r31
    1fdc:	bb 1f       	adc	r27, r27
    1fde:	66 1f       	adc	r22, r22
    1fe0:	77 1f       	adc	r23, r23
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	c2 f7       	brpl	.-16     	; 0x1fd6 <__addsf3x+0x6a>
    1fe6:	0e c0       	rjmp	.+28     	; 0x2004 <__addsf3x+0x98>
    1fe8:	ba 0f       	add	r27, r26
    1fea:	62 1f       	adc	r22, r18
    1fec:	73 1f       	adc	r23, r19
    1fee:	84 1f       	adc	r24, r20
    1ff0:	48 f4       	brcc	.+18     	; 0x2004 <__addsf3x+0x98>
    1ff2:	87 95       	ror	r24
    1ff4:	77 95       	ror	r23
    1ff6:	67 95       	ror	r22
    1ff8:	b7 95       	ror	r27
    1ffa:	f7 95       	ror	r31
    1ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffe:	08 f0       	brcs	.+2      	; 0x2002 <__addsf3x+0x96>
    2000:	b3 cf       	rjmp	.-154    	; 0x1f68 <__addsf3+0x1e>
    2002:	93 95       	inc	r25
    2004:	88 0f       	add	r24, r24
    2006:	08 f0       	brcs	.+2      	; 0x200a <__addsf3x+0x9e>
    2008:	99 27       	eor	r25, r25
    200a:	ee 0f       	add	r30, r30
    200c:	97 95       	ror	r25
    200e:	87 95       	ror	r24
    2010:	08 95       	ret

00002012 <__cmpsf2>:
    2012:	d9 d0       	rcall	.+434    	; 0x21c6 <__fp_cmp>
    2014:	08 f4       	brcc	.+2      	; 0x2018 <__cmpsf2+0x6>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	08 95       	ret

0000201a <__divsf3>:
    201a:	0c d0       	rcall	.+24     	; 0x2034 <__divsf3x>
    201c:	0f c1       	rjmp	.+542    	; 0x223c <__fp_round>
    201e:	07 d1       	rcall	.+526    	; 0x222e <__fp_pscB>
    2020:	40 f0       	brcs	.+16     	; 0x2032 <__divsf3+0x18>
    2022:	fe d0       	rcall	.+508    	; 0x2220 <__fp_pscA>
    2024:	30 f0       	brcs	.+12     	; 0x2032 <__divsf3+0x18>
    2026:	21 f4       	brne	.+8      	; 0x2030 <__divsf3+0x16>
    2028:	5f 3f       	cpi	r21, 0xFF	; 255
    202a:	19 f0       	breq	.+6      	; 0x2032 <__divsf3+0x18>
    202c:	f0 c0       	rjmp	.+480    	; 0x220e <__fp_inf>
    202e:	51 11       	cpse	r21, r1
    2030:	39 c1       	rjmp	.+626    	; 0x22a4 <__fp_szero>
    2032:	f3 c0       	rjmp	.+486    	; 0x221a <__fp_nan>

00002034 <__divsf3x>:
    2034:	14 d1       	rcall	.+552    	; 0x225e <__fp_split3>
    2036:	98 f3       	brcs	.-26     	; 0x201e <__divsf3+0x4>

00002038 <__divsf3_pse>:
    2038:	99 23       	and	r25, r25
    203a:	c9 f3       	breq	.-14     	; 0x202e <__divsf3+0x14>
    203c:	55 23       	and	r21, r21
    203e:	b1 f3       	breq	.-20     	; 0x202c <__divsf3+0x12>
    2040:	95 1b       	sub	r25, r21
    2042:	55 0b       	sbc	r21, r21
    2044:	bb 27       	eor	r27, r27
    2046:	aa 27       	eor	r26, r26
    2048:	62 17       	cp	r22, r18
    204a:	73 07       	cpc	r23, r19
    204c:	84 07       	cpc	r24, r20
    204e:	38 f0       	brcs	.+14     	; 0x205e <__divsf3_pse+0x26>
    2050:	9f 5f       	subi	r25, 0xFF	; 255
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	22 0f       	add	r18, r18
    2056:	33 1f       	adc	r19, r19
    2058:	44 1f       	adc	r20, r20
    205a:	aa 1f       	adc	r26, r26
    205c:	a9 f3       	breq	.-22     	; 0x2048 <__divsf3_pse+0x10>
    205e:	33 d0       	rcall	.+102    	; 0x20c6 <__divsf3_pse+0x8e>
    2060:	0e 2e       	mov	r0, r30
    2062:	3a f0       	brmi	.+14     	; 0x2072 <__divsf3_pse+0x3a>
    2064:	e0 e8       	ldi	r30, 0x80	; 128
    2066:	30 d0       	rcall	.+96     	; 0x20c8 <__divsf3_pse+0x90>
    2068:	91 50       	subi	r25, 0x01	; 1
    206a:	50 40       	sbci	r21, 0x00	; 0
    206c:	e6 95       	lsr	r30
    206e:	00 1c       	adc	r0, r0
    2070:	ca f7       	brpl	.-14     	; 0x2064 <__divsf3_pse+0x2c>
    2072:	29 d0       	rcall	.+82     	; 0x20c6 <__divsf3_pse+0x8e>
    2074:	fe 2f       	mov	r31, r30
    2076:	27 d0       	rcall	.+78     	; 0x20c6 <__divsf3_pse+0x8e>
    2078:	66 0f       	add	r22, r22
    207a:	77 1f       	adc	r23, r23
    207c:	88 1f       	adc	r24, r24
    207e:	bb 1f       	adc	r27, r27
    2080:	26 17       	cp	r18, r22
    2082:	37 07       	cpc	r19, r23
    2084:	48 07       	cpc	r20, r24
    2086:	ab 07       	cpc	r26, r27
    2088:	b0 e8       	ldi	r27, 0x80	; 128
    208a:	09 f0       	breq	.+2      	; 0x208e <__divsf3_pse+0x56>
    208c:	bb 0b       	sbc	r27, r27
    208e:	80 2d       	mov	r24, r0
    2090:	bf 01       	movw	r22, r30
    2092:	ff 27       	eor	r31, r31
    2094:	93 58       	subi	r25, 0x83	; 131
    2096:	5f 4f       	sbci	r21, 0xFF	; 255
    2098:	2a f0       	brmi	.+10     	; 0x20a4 <__divsf3_pse+0x6c>
    209a:	9e 3f       	cpi	r25, 0xFE	; 254
    209c:	51 05       	cpc	r21, r1
    209e:	68 f0       	brcs	.+26     	; 0x20ba <__divsf3_pse+0x82>
    20a0:	b6 c0       	rjmp	.+364    	; 0x220e <__fp_inf>
    20a2:	00 c1       	rjmp	.+512    	; 0x22a4 <__fp_szero>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	ec f3       	brlt	.-6      	; 0x20a2 <__divsf3_pse+0x6a>
    20a8:	98 3e       	cpi	r25, 0xE8	; 232
    20aa:	dc f3       	brlt	.-10     	; 0x20a2 <__divsf3_pse+0x6a>
    20ac:	86 95       	lsr	r24
    20ae:	77 95       	ror	r23
    20b0:	67 95       	ror	r22
    20b2:	b7 95       	ror	r27
    20b4:	f7 95       	ror	r31
    20b6:	9f 5f       	subi	r25, 0xFF	; 255
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <__divsf3_pse+0x74>
    20ba:	88 0f       	add	r24, r24
    20bc:	91 1d       	adc	r25, r1
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	97 f9       	bld	r25, 7
    20c4:	08 95       	ret
    20c6:	e1 e0       	ldi	r30, 0x01	; 1
    20c8:	66 0f       	add	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	88 1f       	adc	r24, r24
    20ce:	bb 1f       	adc	r27, r27
    20d0:	62 17       	cp	r22, r18
    20d2:	73 07       	cpc	r23, r19
    20d4:	84 07       	cpc	r24, r20
    20d6:	ba 07       	cpc	r27, r26
    20d8:	20 f0       	brcs	.+8      	; 0x20e2 <__divsf3_pse+0xaa>
    20da:	62 1b       	sub	r22, r18
    20dc:	73 0b       	sbc	r23, r19
    20de:	84 0b       	sbc	r24, r20
    20e0:	ba 0b       	sbc	r27, r26
    20e2:	ee 1f       	adc	r30, r30
    20e4:	88 f7       	brcc	.-30     	; 0x20c8 <__divsf3_pse+0x90>
    20e6:	e0 95       	com	r30
    20e8:	08 95       	ret

000020ea <__fixsfsi>:
    20ea:	04 d0       	rcall	.+8      	; 0x20f4 <__fixunssfsi>
    20ec:	68 94       	set
    20ee:	b1 11       	cpse	r27, r1
    20f0:	d9 c0       	rjmp	.+434    	; 0x22a4 <__fp_szero>
    20f2:	08 95       	ret

000020f4 <__fixunssfsi>:
    20f4:	bc d0       	rcall	.+376    	; 0x226e <__fp_splitA>
    20f6:	88 f0       	brcs	.+34     	; 0x211a <__fixunssfsi+0x26>
    20f8:	9f 57       	subi	r25, 0x7F	; 127
    20fa:	90 f0       	brcs	.+36     	; 0x2120 <__fixunssfsi+0x2c>
    20fc:	b9 2f       	mov	r27, r25
    20fe:	99 27       	eor	r25, r25
    2100:	b7 51       	subi	r27, 0x17	; 23
    2102:	a0 f0       	brcs	.+40     	; 0x212c <__fixunssfsi+0x38>
    2104:	d1 f0       	breq	.+52     	; 0x213a <__fixunssfsi+0x46>
    2106:	66 0f       	add	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	1a f0       	brmi	.+6      	; 0x2116 <__fixunssfsi+0x22>
    2110:	ba 95       	dec	r27
    2112:	c9 f7       	brne	.-14     	; 0x2106 <__fixunssfsi+0x12>
    2114:	12 c0       	rjmp	.+36     	; 0x213a <__fixunssfsi+0x46>
    2116:	b1 30       	cpi	r27, 0x01	; 1
    2118:	81 f0       	breq	.+32     	; 0x213a <__fixunssfsi+0x46>
    211a:	c3 d0       	rcall	.+390    	; 0x22a2 <__fp_zero>
    211c:	b1 e0       	ldi	r27, 0x01	; 1
    211e:	08 95       	ret
    2120:	c0 c0       	rjmp	.+384    	; 0x22a2 <__fp_zero>
    2122:	67 2f       	mov	r22, r23
    2124:	78 2f       	mov	r23, r24
    2126:	88 27       	eor	r24, r24
    2128:	b8 5f       	subi	r27, 0xF8	; 248
    212a:	39 f0       	breq	.+14     	; 0x213a <__fixunssfsi+0x46>
    212c:	b9 3f       	cpi	r27, 0xF9	; 249
    212e:	cc f3       	brlt	.-14     	; 0x2122 <__fixunssfsi+0x2e>
    2130:	86 95       	lsr	r24
    2132:	77 95       	ror	r23
    2134:	67 95       	ror	r22
    2136:	b3 95       	inc	r27
    2138:	d9 f7       	brne	.-10     	; 0x2130 <__fixunssfsi+0x3c>
    213a:	3e f4       	brtc	.+14     	; 0x214a <__fixunssfsi+0x56>
    213c:	90 95       	com	r25
    213e:	80 95       	com	r24
    2140:	70 95       	com	r23
    2142:	61 95       	neg	r22
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	8f 4f       	sbci	r24, 0xFF	; 255
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	08 95       	ret

0000214c <__floatunsisf>:
    214c:	e8 94       	clt
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <__floatsisf+0x12>

00002150 <__floatsisf>:
    2150:	97 fb       	bst	r25, 7
    2152:	3e f4       	brtc	.+14     	; 0x2162 <__floatsisf+0x12>
    2154:	90 95       	com	r25
    2156:	80 95       	com	r24
    2158:	70 95       	com	r23
    215a:	61 95       	neg	r22
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	8f 4f       	sbci	r24, 0xFF	; 255
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	99 23       	and	r25, r25
    2164:	a9 f0       	breq	.+42     	; 0x2190 <__floatsisf+0x40>
    2166:	f9 2f       	mov	r31, r25
    2168:	96 e9       	ldi	r25, 0x96	; 150
    216a:	bb 27       	eor	r27, r27
    216c:	93 95       	inc	r25
    216e:	f6 95       	lsr	r31
    2170:	87 95       	ror	r24
    2172:	77 95       	ror	r23
    2174:	67 95       	ror	r22
    2176:	b7 95       	ror	r27
    2178:	f1 11       	cpse	r31, r1
    217a:	f8 cf       	rjmp	.-16     	; 0x216c <__floatsisf+0x1c>
    217c:	fa f4       	brpl	.+62     	; 0x21bc <__floatsisf+0x6c>
    217e:	bb 0f       	add	r27, r27
    2180:	11 f4       	brne	.+4      	; 0x2186 <__floatsisf+0x36>
    2182:	60 ff       	sbrs	r22, 0
    2184:	1b c0       	rjmp	.+54     	; 0x21bc <__floatsisf+0x6c>
    2186:	6f 5f       	subi	r22, 0xFF	; 255
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	16 c0       	rjmp	.+44     	; 0x21bc <__floatsisf+0x6c>
    2190:	88 23       	and	r24, r24
    2192:	11 f0       	breq	.+4      	; 0x2198 <__floatsisf+0x48>
    2194:	96 e9       	ldi	r25, 0x96	; 150
    2196:	11 c0       	rjmp	.+34     	; 0x21ba <__floatsisf+0x6a>
    2198:	77 23       	and	r23, r23
    219a:	21 f0       	breq	.+8      	; 0x21a4 <__floatsisf+0x54>
    219c:	9e e8       	ldi	r25, 0x8E	; 142
    219e:	87 2f       	mov	r24, r23
    21a0:	76 2f       	mov	r23, r22
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <__floatsisf+0x5e>
    21a4:	66 23       	and	r22, r22
    21a6:	71 f0       	breq	.+28     	; 0x21c4 <__floatsisf+0x74>
    21a8:	96 e8       	ldi	r25, 0x86	; 134
    21aa:	86 2f       	mov	r24, r22
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	2a f0       	brmi	.+10     	; 0x21bc <__floatsisf+0x6c>
    21b2:	9a 95       	dec	r25
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	da f7       	brpl	.-10     	; 0x21b2 <__floatsisf+0x62>
    21bc:	88 0f       	add	r24, r24
    21be:	96 95       	lsr	r25
    21c0:	87 95       	ror	r24
    21c2:	97 f9       	bld	r25, 7
    21c4:	08 95       	ret

000021c6 <__fp_cmp>:
    21c6:	99 0f       	add	r25, r25
    21c8:	00 08       	sbc	r0, r0
    21ca:	55 0f       	add	r21, r21
    21cc:	aa 0b       	sbc	r26, r26
    21ce:	e0 e8       	ldi	r30, 0x80	; 128
    21d0:	fe ef       	ldi	r31, 0xFE	; 254
    21d2:	16 16       	cp	r1, r22
    21d4:	17 06       	cpc	r1, r23
    21d6:	e8 07       	cpc	r30, r24
    21d8:	f9 07       	cpc	r31, r25
    21da:	c0 f0       	brcs	.+48     	; 0x220c <__fp_cmp+0x46>
    21dc:	12 16       	cp	r1, r18
    21de:	13 06       	cpc	r1, r19
    21e0:	e4 07       	cpc	r30, r20
    21e2:	f5 07       	cpc	r31, r21
    21e4:	98 f0       	brcs	.+38     	; 0x220c <__fp_cmp+0x46>
    21e6:	62 1b       	sub	r22, r18
    21e8:	73 0b       	sbc	r23, r19
    21ea:	84 0b       	sbc	r24, r20
    21ec:	95 0b       	sbc	r25, r21
    21ee:	39 f4       	brne	.+14     	; 0x21fe <__fp_cmp+0x38>
    21f0:	0a 26       	eor	r0, r26
    21f2:	61 f0       	breq	.+24     	; 0x220c <__fp_cmp+0x46>
    21f4:	23 2b       	or	r18, r19
    21f6:	24 2b       	or	r18, r20
    21f8:	25 2b       	or	r18, r21
    21fa:	21 f4       	brne	.+8      	; 0x2204 <__fp_cmp+0x3e>
    21fc:	08 95       	ret
    21fe:	0a 26       	eor	r0, r26
    2200:	09 f4       	brne	.+2      	; 0x2204 <__fp_cmp+0x3e>
    2202:	a1 40       	sbci	r26, 0x01	; 1
    2204:	a6 95       	lsr	r26
    2206:	8f ef       	ldi	r24, 0xFF	; 255
    2208:	81 1d       	adc	r24, r1
    220a:	81 1d       	adc	r24, r1
    220c:	08 95       	ret

0000220e <__fp_inf>:
    220e:	97 f9       	bld	r25, 7
    2210:	9f 67       	ori	r25, 0x7F	; 127
    2212:	80 e8       	ldi	r24, 0x80	; 128
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	08 95       	ret

0000221a <__fp_nan>:
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	80 ec       	ldi	r24, 0xC0	; 192
    221e:	08 95       	ret

00002220 <__fp_pscA>:
    2220:	00 24       	eor	r0, r0
    2222:	0a 94       	dec	r0
    2224:	16 16       	cp	r1, r22
    2226:	17 06       	cpc	r1, r23
    2228:	18 06       	cpc	r1, r24
    222a:	09 06       	cpc	r0, r25
    222c:	08 95       	ret

0000222e <__fp_pscB>:
    222e:	00 24       	eor	r0, r0
    2230:	0a 94       	dec	r0
    2232:	12 16       	cp	r1, r18
    2234:	13 06       	cpc	r1, r19
    2236:	14 06       	cpc	r1, r20
    2238:	05 06       	cpc	r0, r21
    223a:	08 95       	ret

0000223c <__fp_round>:
    223c:	09 2e       	mov	r0, r25
    223e:	03 94       	inc	r0
    2240:	00 0c       	add	r0, r0
    2242:	11 f4       	brne	.+4      	; 0x2248 <__fp_round+0xc>
    2244:	88 23       	and	r24, r24
    2246:	52 f0       	brmi	.+20     	; 0x225c <__fp_round+0x20>
    2248:	bb 0f       	add	r27, r27
    224a:	40 f4       	brcc	.+16     	; 0x225c <__fp_round+0x20>
    224c:	bf 2b       	or	r27, r31
    224e:	11 f4       	brne	.+4      	; 0x2254 <__fp_round+0x18>
    2250:	60 ff       	sbrs	r22, 0
    2252:	04 c0       	rjmp	.+8      	; 0x225c <__fp_round+0x20>
    2254:	6f 5f       	subi	r22, 0xFF	; 255
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	8f 4f       	sbci	r24, 0xFF	; 255
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	08 95       	ret

0000225e <__fp_split3>:
    225e:	57 fd       	sbrc	r21, 7
    2260:	90 58       	subi	r25, 0x80	; 128
    2262:	44 0f       	add	r20, r20
    2264:	55 1f       	adc	r21, r21
    2266:	59 f0       	breq	.+22     	; 0x227e <__fp_splitA+0x10>
    2268:	5f 3f       	cpi	r21, 0xFF	; 255
    226a:	71 f0       	breq	.+28     	; 0x2288 <__fp_splitA+0x1a>
    226c:	47 95       	ror	r20

0000226e <__fp_splitA>:
    226e:	88 0f       	add	r24, r24
    2270:	97 fb       	bst	r25, 7
    2272:	99 1f       	adc	r25, r25
    2274:	61 f0       	breq	.+24     	; 0x228e <__fp_splitA+0x20>
    2276:	9f 3f       	cpi	r25, 0xFF	; 255
    2278:	79 f0       	breq	.+30     	; 0x2298 <__fp_splitA+0x2a>
    227a:	87 95       	ror	r24
    227c:	08 95       	ret
    227e:	12 16       	cp	r1, r18
    2280:	13 06       	cpc	r1, r19
    2282:	14 06       	cpc	r1, r20
    2284:	55 1f       	adc	r21, r21
    2286:	f2 cf       	rjmp	.-28     	; 0x226c <__fp_split3+0xe>
    2288:	46 95       	lsr	r20
    228a:	f1 df       	rcall	.-30     	; 0x226e <__fp_splitA>
    228c:	08 c0       	rjmp	.+16     	; 0x229e <__fp_splitA+0x30>
    228e:	16 16       	cp	r1, r22
    2290:	17 06       	cpc	r1, r23
    2292:	18 06       	cpc	r1, r24
    2294:	99 1f       	adc	r25, r25
    2296:	f1 cf       	rjmp	.-30     	; 0x227a <__fp_splitA+0xc>
    2298:	86 95       	lsr	r24
    229a:	71 05       	cpc	r23, r1
    229c:	61 05       	cpc	r22, r1
    229e:	08 94       	sec
    22a0:	08 95       	ret

000022a2 <__fp_zero>:
    22a2:	e8 94       	clt

000022a4 <__fp_szero>:
    22a4:	bb 27       	eor	r27, r27
    22a6:	66 27       	eor	r22, r22
    22a8:	77 27       	eor	r23, r23
    22aa:	cb 01       	movw	r24, r22
    22ac:	97 f9       	bld	r25, 7
    22ae:	08 95       	ret

000022b0 <__mulsf3>:
    22b0:	0b d0       	rcall	.+22     	; 0x22c8 <__mulsf3x>
    22b2:	c4 cf       	rjmp	.-120    	; 0x223c <__fp_round>
    22b4:	b5 df       	rcall	.-150    	; 0x2220 <__fp_pscA>
    22b6:	28 f0       	brcs	.+10     	; 0x22c2 <__mulsf3+0x12>
    22b8:	ba df       	rcall	.-140    	; 0x222e <__fp_pscB>
    22ba:	18 f0       	brcs	.+6      	; 0x22c2 <__mulsf3+0x12>
    22bc:	95 23       	and	r25, r21
    22be:	09 f0       	breq	.+2      	; 0x22c2 <__mulsf3+0x12>
    22c0:	a6 cf       	rjmp	.-180    	; 0x220e <__fp_inf>
    22c2:	ab cf       	rjmp	.-170    	; 0x221a <__fp_nan>
    22c4:	11 24       	eor	r1, r1
    22c6:	ee cf       	rjmp	.-36     	; 0x22a4 <__fp_szero>

000022c8 <__mulsf3x>:
    22c8:	ca df       	rcall	.-108    	; 0x225e <__fp_split3>
    22ca:	a0 f3       	brcs	.-24     	; 0x22b4 <__mulsf3+0x4>

000022cc <__mulsf3_pse>:
    22cc:	95 9f       	mul	r25, r21
    22ce:	d1 f3       	breq	.-12     	; 0x22c4 <__mulsf3+0x14>
    22d0:	95 0f       	add	r25, r21
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	55 1f       	adc	r21, r21
    22d6:	62 9f       	mul	r22, r18
    22d8:	f0 01       	movw	r30, r0
    22da:	72 9f       	mul	r23, r18
    22dc:	bb 27       	eor	r27, r27
    22de:	f0 0d       	add	r31, r0
    22e0:	b1 1d       	adc	r27, r1
    22e2:	63 9f       	mul	r22, r19
    22e4:	aa 27       	eor	r26, r26
    22e6:	f0 0d       	add	r31, r0
    22e8:	b1 1d       	adc	r27, r1
    22ea:	aa 1f       	adc	r26, r26
    22ec:	64 9f       	mul	r22, r20
    22ee:	66 27       	eor	r22, r22
    22f0:	b0 0d       	add	r27, r0
    22f2:	a1 1d       	adc	r26, r1
    22f4:	66 1f       	adc	r22, r22
    22f6:	82 9f       	mul	r24, r18
    22f8:	22 27       	eor	r18, r18
    22fa:	b0 0d       	add	r27, r0
    22fc:	a1 1d       	adc	r26, r1
    22fe:	62 1f       	adc	r22, r18
    2300:	73 9f       	mul	r23, r19
    2302:	b0 0d       	add	r27, r0
    2304:	a1 1d       	adc	r26, r1
    2306:	62 1f       	adc	r22, r18
    2308:	83 9f       	mul	r24, r19
    230a:	a0 0d       	add	r26, r0
    230c:	61 1d       	adc	r22, r1
    230e:	22 1f       	adc	r18, r18
    2310:	74 9f       	mul	r23, r20
    2312:	33 27       	eor	r19, r19
    2314:	a0 0d       	add	r26, r0
    2316:	61 1d       	adc	r22, r1
    2318:	23 1f       	adc	r18, r19
    231a:	84 9f       	mul	r24, r20
    231c:	60 0d       	add	r22, r0
    231e:	21 1d       	adc	r18, r1
    2320:	82 2f       	mov	r24, r18
    2322:	76 2f       	mov	r23, r22
    2324:	6a 2f       	mov	r22, r26
    2326:	11 24       	eor	r1, r1
    2328:	9f 57       	subi	r25, 0x7F	; 127
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	8a f0       	brmi	.+34     	; 0x2350 <__mulsf3_pse+0x84>
    232e:	e1 f0       	breq	.+56     	; 0x2368 <__mulsf3_pse+0x9c>
    2330:	88 23       	and	r24, r24
    2332:	4a f0       	brmi	.+18     	; 0x2346 <__mulsf3_pse+0x7a>
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	bb 1f       	adc	r27, r27
    233a:	66 1f       	adc	r22, r22
    233c:	77 1f       	adc	r23, r23
    233e:	88 1f       	adc	r24, r24
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	a9 f7       	brne	.-22     	; 0x2330 <__mulsf3_pse+0x64>
    2346:	9e 3f       	cpi	r25, 0xFE	; 254
    2348:	51 05       	cpc	r21, r1
    234a:	70 f0       	brcs	.+28     	; 0x2368 <__mulsf3_pse+0x9c>
    234c:	60 cf       	rjmp	.-320    	; 0x220e <__fp_inf>
    234e:	aa cf       	rjmp	.-172    	; 0x22a4 <__fp_szero>
    2350:	5f 3f       	cpi	r21, 0xFF	; 255
    2352:	ec f3       	brlt	.-6      	; 0x234e <__mulsf3_pse+0x82>
    2354:	98 3e       	cpi	r25, 0xE8	; 232
    2356:	dc f3       	brlt	.-10     	; 0x234e <__mulsf3_pse+0x82>
    2358:	86 95       	lsr	r24
    235a:	77 95       	ror	r23
    235c:	67 95       	ror	r22
    235e:	b7 95       	ror	r27
    2360:	f7 95       	ror	r31
    2362:	e7 95       	ror	r30
    2364:	9f 5f       	subi	r25, 0xFF	; 255
    2366:	c1 f7       	brne	.-16     	; 0x2358 <__mulsf3_pse+0x8c>
    2368:	fe 2b       	or	r31, r30
    236a:	88 0f       	add	r24, r24
    236c:	91 1d       	adc	r25, r1
    236e:	96 95       	lsr	r25
    2370:	87 95       	ror	r24
    2372:	97 f9       	bld	r25, 7
    2374:	08 95       	ret

00002376 <pow>:
    2376:	fa 01       	movw	r30, r20
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	30 96       	adiw	r30, 0x00	; 0
    237e:	21 05       	cpc	r18, r1
    2380:	31 05       	cpc	r19, r1
    2382:	99 f1       	breq	.+102    	; 0x23ea <pow+0x74>
    2384:	61 15       	cp	r22, r1
    2386:	71 05       	cpc	r23, r1
    2388:	61 f4       	brne	.+24     	; 0x23a2 <pow+0x2c>
    238a:	80 38       	cpi	r24, 0x80	; 128
    238c:	bf e3       	ldi	r27, 0x3F	; 63
    238e:	9b 07       	cpc	r25, r27
    2390:	49 f1       	breq	.+82     	; 0x23e4 <pow+0x6e>
    2392:	68 94       	set
    2394:	90 38       	cpi	r25, 0x80	; 128
    2396:	81 05       	cpc	r24, r1
    2398:	61 f0       	breq	.+24     	; 0x23b2 <pow+0x3c>
    239a:	80 38       	cpi	r24, 0x80	; 128
    239c:	bf ef       	ldi	r27, 0xFF	; 255
    239e:	9b 07       	cpc	r25, r27
    23a0:	41 f0       	breq	.+16     	; 0x23b2 <pow+0x3c>
    23a2:	99 23       	and	r25, r25
    23a4:	42 f5       	brpl	.+80     	; 0x23f6 <pow+0x80>
    23a6:	ff 3f       	cpi	r31, 0xFF	; 255
    23a8:	e1 05       	cpc	r30, r1
    23aa:	31 05       	cpc	r19, r1
    23ac:	21 05       	cpc	r18, r1
    23ae:	11 f1       	breq	.+68     	; 0x23f4 <pow+0x7e>
    23b0:	e8 94       	clt
    23b2:	08 94       	sec
    23b4:	e7 95       	ror	r30
    23b6:	d9 01       	movw	r26, r18
    23b8:	aa 23       	and	r26, r26
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <pow+0x50>
    23bc:	ab 2f       	mov	r26, r27
    23be:	be 2f       	mov	r27, r30
    23c0:	f8 5f       	subi	r31, 0xF8	; 248
    23c2:	d0 f3       	brcs	.-12     	; 0x23b8 <pow+0x42>
    23c4:	10 c0       	rjmp	.+32     	; 0x23e6 <pow+0x70>
    23c6:	ff 5f       	subi	r31, 0xFF	; 255
    23c8:	70 f4       	brcc	.+28     	; 0x23e6 <pow+0x70>
    23ca:	a6 95       	lsr	r26
    23cc:	e0 f7       	brcc	.-8      	; 0x23c6 <pow+0x50>
    23ce:	f7 39       	cpi	r31, 0x97	; 151
    23d0:	50 f0       	brcs	.+20     	; 0x23e6 <pow+0x70>
    23d2:	19 f0       	breq	.+6      	; 0x23da <pow+0x64>
    23d4:	ff 3a       	cpi	r31, 0xAF	; 175
    23d6:	38 f4       	brcc	.+14     	; 0x23e6 <pow+0x70>
    23d8:	9f 77       	andi	r25, 0x7F	; 127
    23da:	9f 93       	push	r25
    23dc:	0c d0       	rcall	.+24     	; 0x23f6 <pow+0x80>
    23de:	0f 90       	pop	r0
    23e0:	07 fc       	sbrc	r0, 7
    23e2:	90 58       	subi	r25, 0x80	; 128
    23e4:	08 95       	ret
    23e6:	3e f0       	brts	.+14     	; 0x23f6 <pow+0x80>
    23e8:	18 cf       	rjmp	.-464    	; 0x221a <__fp_nan>
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	80 e8       	ldi	r24, 0x80	; 128
    23f0:	9f e3       	ldi	r25, 0x3F	; 63
    23f2:	08 95       	ret
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	9f 77       	andi	r25, 0x7F	; 127
    23f8:	5f 93       	push	r21
    23fa:	4f 93       	push	r20
    23fc:	3f 93       	push	r19
    23fe:	2f 93       	push	r18
    2400:	9e d0       	rcall	.+316    	; 0x253e <log>
    2402:	2f 91       	pop	r18
    2404:	3f 91       	pop	r19
    2406:	4f 91       	pop	r20
    2408:	5f 91       	pop	r21
    240a:	52 df       	rcall	.-348    	; 0x22b0 <__mulsf3>
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <exp>
    240e:	19 f4       	brne	.+6      	; 0x2416 <pow+0xa0>
    2410:	0e f0       	brts	.+2      	; 0x2414 <pow+0x9e>
    2412:	fd ce       	rjmp	.-518    	; 0x220e <__fp_inf>
    2414:	46 cf       	rjmp	.-372    	; 0x22a2 <__fp_zero>
    2416:	01 cf       	rjmp	.-510    	; 0x221a <__fp_nan>

00002418 <exp>:
    2418:	2a df       	rcall	.-428    	; 0x226e <__fp_splitA>
    241a:	c8 f3       	brcs	.-14     	; 0x240e <pow+0x98>
    241c:	96 38       	cpi	r25, 0x86	; 134
    241e:	c0 f7       	brcc	.-16     	; 0x2410 <pow+0x9a>
    2420:	07 f8       	bld	r0, 7
    2422:	0f 92       	push	r0
    2424:	e8 94       	clt
    2426:	2b e3       	ldi	r18, 0x3B	; 59
    2428:	3a ea       	ldi	r19, 0xAA	; 170
    242a:	48 eb       	ldi	r20, 0xB8	; 184
    242c:	5f e7       	ldi	r21, 0x7F	; 127
    242e:	4e df       	rcall	.-356    	; 0x22cc <__mulsf3_pse>
    2430:	0f 92       	push	r0
    2432:	0f 92       	push	r0
    2434:	0f 92       	push	r0
    2436:	4d b7       	in	r20, 0x3d	; 61
    2438:	5e b7       	in	r21, 0x3e	; 62
    243a:	0f 92       	push	r0
    243c:	c0 d0       	rcall	.+384    	; 0x25be <modf>
    243e:	e8 e6       	ldi	r30, 0x68	; 104
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	16 d0       	rcall	.+44     	; 0x2470 <__fp_powser>
    2444:	4f 91       	pop	r20
    2446:	5f 91       	pop	r21
    2448:	ef 91       	pop	r30
    244a:	ff 91       	pop	r31
    244c:	e5 95       	asr	r30
    244e:	ee 1f       	adc	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	49 f0       	breq	.+18     	; 0x2466 <exp+0x4e>
    2454:	fe 57       	subi	r31, 0x7E	; 126
    2456:	e0 68       	ori	r30, 0x80	; 128
    2458:	44 27       	eor	r20, r20
    245a:	ee 0f       	add	r30, r30
    245c:	44 1f       	adc	r20, r20
    245e:	fa 95       	dec	r31
    2460:	e1 f7       	brne	.-8      	; 0x245a <exp+0x42>
    2462:	41 95       	neg	r20
    2464:	55 0b       	sbc	r21, r21
    2466:	32 d0       	rcall	.+100    	; 0x24cc <ldexp>
    2468:	0f 90       	pop	r0
    246a:	07 fe       	sbrs	r0, 7
    246c:	26 c0       	rjmp	.+76     	; 0x24ba <inverse>
    246e:	08 95       	ret

00002470 <__fp_powser>:
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	1f 93       	push	r17
    2476:	0f 93       	push	r16
    2478:	ff 92       	push	r15
    247a:	ef 92       	push	r14
    247c:	df 92       	push	r13
    247e:	7b 01       	movw	r14, r22
    2480:	8c 01       	movw	r16, r24
    2482:	68 94       	set
    2484:	05 c0       	rjmp	.+10     	; 0x2490 <__fp_powser+0x20>
    2486:	da 2e       	mov	r13, r26
    2488:	ef 01       	movw	r28, r30
    248a:	1e df       	rcall	.-452    	; 0x22c8 <__mulsf3x>
    248c:	fe 01       	movw	r30, r28
    248e:	e8 94       	clt
    2490:	a5 91       	lpm	r26, Z+
    2492:	25 91       	lpm	r18, Z+
    2494:	35 91       	lpm	r19, Z+
    2496:	45 91       	lpm	r20, Z+
    2498:	55 91       	lpm	r21, Z+
    249a:	ae f3       	brts	.-22     	; 0x2486 <__fp_powser+0x16>
    249c:	ef 01       	movw	r28, r30
    249e:	66 dd       	rcall	.-1332   	; 0x1f6c <__addsf3x>
    24a0:	fe 01       	movw	r30, r28
    24a2:	97 01       	movw	r18, r14
    24a4:	a8 01       	movw	r20, r16
    24a6:	da 94       	dec	r13
    24a8:	79 f7       	brne	.-34     	; 0x2488 <__fp_powser+0x18>
    24aa:	df 90       	pop	r13
    24ac:	ef 90       	pop	r14
    24ae:	ff 90       	pop	r15
    24b0:	0f 91       	pop	r16
    24b2:	1f 91       	pop	r17
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <inverse>:
    24ba:	9b 01       	movw	r18, r22
    24bc:	ac 01       	movw	r20, r24
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	80 e8       	ldi	r24, 0x80	; 128
    24c4:	9f e3       	ldi	r25, 0x3F	; 63
    24c6:	a9 cd       	rjmp	.-1198   	; 0x201a <__divsf3>
    24c8:	a2 ce       	rjmp	.-700    	; 0x220e <__fp_inf>
    24ca:	ac c0       	rjmp	.+344    	; 0x2624 <__fp_mpack>

000024cc <ldexp>:
    24cc:	d0 de       	rcall	.-608    	; 0x226e <__fp_splitA>
    24ce:	e8 f3       	brcs	.-6      	; 0x24ca <inverse+0x10>
    24d0:	99 23       	and	r25, r25
    24d2:	d9 f3       	breq	.-10     	; 0x24ca <inverse+0x10>
    24d4:	94 0f       	add	r25, r20
    24d6:	51 1d       	adc	r21, r1
    24d8:	bb f3       	brvs	.-18     	; 0x24c8 <inverse+0xe>
    24da:	91 50       	subi	r25, 0x01	; 1
    24dc:	50 40       	sbci	r21, 0x00	; 0
    24de:	94 f0       	brlt	.+36     	; 0x2504 <ldexp+0x38>
    24e0:	59 f0       	breq	.+22     	; 0x24f8 <ldexp+0x2c>
    24e2:	88 23       	and	r24, r24
    24e4:	32 f0       	brmi	.+12     	; 0x24f2 <ldexp+0x26>
    24e6:	66 0f       	add	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	50 40       	sbci	r21, 0x00	; 0
    24f0:	c1 f7       	brne	.-16     	; 0x24e2 <ldexp+0x16>
    24f2:	9e 3f       	cpi	r25, 0xFE	; 254
    24f4:	51 05       	cpc	r21, r1
    24f6:	44 f7       	brge	.-48     	; 0x24c8 <inverse+0xe>
    24f8:	88 0f       	add	r24, r24
    24fa:	91 1d       	adc	r25, r1
    24fc:	96 95       	lsr	r25
    24fe:	87 95       	ror	r24
    2500:	97 f9       	bld	r25, 7
    2502:	08 95       	ret
    2504:	5f 3f       	cpi	r21, 0xFF	; 255
    2506:	ac f0       	brlt	.+42     	; 0x2532 <ldexp+0x66>
    2508:	98 3e       	cpi	r25, 0xE8	; 232
    250a:	9c f0       	brlt	.+38     	; 0x2532 <ldexp+0x66>
    250c:	bb 27       	eor	r27, r27
    250e:	86 95       	lsr	r24
    2510:	77 95       	ror	r23
    2512:	67 95       	ror	r22
    2514:	b7 95       	ror	r27
    2516:	08 f4       	brcc	.+2      	; 0x251a <ldexp+0x4e>
    2518:	b1 60       	ori	r27, 0x01	; 1
    251a:	93 95       	inc	r25
    251c:	c1 f7       	brne	.-16     	; 0x250e <ldexp+0x42>
    251e:	bb 0f       	add	r27, r27
    2520:	58 f7       	brcc	.-42     	; 0x24f8 <ldexp+0x2c>
    2522:	11 f4       	brne	.+4      	; 0x2528 <ldexp+0x5c>
    2524:	60 ff       	sbrs	r22, 0
    2526:	e8 cf       	rjmp	.-48     	; 0x24f8 <ldexp+0x2c>
    2528:	6f 5f       	subi	r22, 0xFF	; 255
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	8f 4f       	sbci	r24, 0xFF	; 255
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	e3 cf       	rjmp	.-58     	; 0x24f8 <ldexp+0x2c>
    2532:	b8 ce       	rjmp	.-656    	; 0x22a4 <__fp_szero>
    2534:	0e f0       	brts	.+2      	; 0x2538 <ldexp+0x6c>
    2536:	76 c0       	rjmp	.+236    	; 0x2624 <__fp_mpack>
    2538:	70 ce       	rjmp	.-800    	; 0x221a <__fp_nan>
    253a:	68 94       	set
    253c:	68 ce       	rjmp	.-816    	; 0x220e <__fp_inf>

0000253e <log>:
    253e:	97 de       	rcall	.-722    	; 0x226e <__fp_splitA>
    2540:	c8 f3       	brcs	.-14     	; 0x2534 <ldexp+0x68>
    2542:	99 23       	and	r25, r25
    2544:	d1 f3       	breq	.-12     	; 0x253a <ldexp+0x6e>
    2546:	c6 f3       	brts	.-16     	; 0x2538 <ldexp+0x6c>
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	1f 93       	push	r17
    254e:	0f 93       	push	r16
    2550:	ff 92       	push	r15
    2552:	c9 2f       	mov	r28, r25
    2554:	dd 27       	eor	r29, r29
    2556:	88 23       	and	r24, r24
    2558:	2a f0       	brmi	.+10     	; 0x2564 <log+0x26>
    255a:	21 97       	sbiw	r28, 0x01	; 1
    255c:	66 0f       	add	r22, r22
    255e:	77 1f       	adc	r23, r23
    2560:	88 1f       	adc	r24, r24
    2562:	da f7       	brpl	.-10     	; 0x255a <log+0x1c>
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f eb       	ldi	r21, 0xBF	; 191
    256c:	9f e3       	ldi	r25, 0x3F	; 63
    256e:	88 39       	cpi	r24, 0x98	; 152
    2570:	20 f0       	brcs	.+8      	; 0x257a <log+0x3c>
    2572:	80 3e       	cpi	r24, 0xE0	; 224
    2574:	30 f0       	brcs	.+12     	; 0x2582 <log+0x44>
    2576:	21 96       	adiw	r28, 0x01	; 1
    2578:	8f 77       	andi	r24, 0x7F	; 127
    257a:	e7 dc       	rcall	.-1586   	; 0x1f4a <__addsf3>
    257c:	e0 e9       	ldi	r30, 0x90	; 144
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <log+0x4a>
    2582:	e3 dc       	rcall	.-1594   	; 0x1f4a <__addsf3>
    2584:	ed eb       	ldi	r30, 0xBD	; 189
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	73 df       	rcall	.-282    	; 0x2470 <__fp_powser>
    258a:	8b 01       	movw	r16, r22
    258c:	be 01       	movw	r22, r28
    258e:	ec 01       	movw	r28, r24
    2590:	fb 2e       	mov	r15, r27
    2592:	6f 57       	subi	r22, 0x7F	; 127
    2594:	71 09       	sbc	r23, r1
    2596:	75 95       	asr	r23
    2598:	77 1f       	adc	r23, r23
    259a:	88 0b       	sbc	r24, r24
    259c:	99 0b       	sbc	r25, r25
    259e:	d8 dd       	rcall	.-1104   	; 0x2150 <__floatsisf>
    25a0:	28 e1       	ldi	r18, 0x18	; 24
    25a2:	32 e7       	ldi	r19, 0x72	; 114
    25a4:	41 e3       	ldi	r20, 0x31	; 49
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	8f de       	rcall	.-738    	; 0x22c8 <__mulsf3x>
    25aa:	af 2d       	mov	r26, r15
    25ac:	98 01       	movw	r18, r16
    25ae:	ae 01       	movw	r20, r28
    25b0:	ff 90       	pop	r15
    25b2:	0f 91       	pop	r16
    25b4:	1f 91       	pop	r17
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	d8 dc       	rcall	.-1616   	; 0x1f6c <__addsf3x>
    25bc:	3f ce       	rjmp	.-898    	; 0x223c <__fp_round>

000025be <modf>:
    25be:	fa 01       	movw	r30, r20
    25c0:	dc 01       	movw	r26, r24
    25c2:	aa 0f       	add	r26, r26
    25c4:	bb 1f       	adc	r27, r27
    25c6:	9b 01       	movw	r18, r22
    25c8:	ac 01       	movw	r20, r24
    25ca:	bf 57       	subi	r27, 0x7F	; 127
    25cc:	28 f4       	brcc	.+10     	; 0x25d8 <modf+0x1a>
    25ce:	22 27       	eor	r18, r18
    25d0:	33 27       	eor	r19, r19
    25d2:	44 27       	eor	r20, r20
    25d4:	50 78       	andi	r21, 0x80	; 128
    25d6:	1f c0       	rjmp	.+62     	; 0x2616 <modf+0x58>
    25d8:	b7 51       	subi	r27, 0x17	; 23
    25da:	88 f4       	brcc	.+34     	; 0x25fe <modf+0x40>
    25dc:	ab 2f       	mov	r26, r27
    25de:	00 24       	eor	r0, r0
    25e0:	46 95       	lsr	r20
    25e2:	37 95       	ror	r19
    25e4:	27 95       	ror	r18
    25e6:	01 1c       	adc	r0, r1
    25e8:	a3 95       	inc	r26
    25ea:	d2 f3       	brmi	.-12     	; 0x25e0 <modf+0x22>
    25ec:	00 20       	and	r0, r0
    25ee:	69 f0       	breq	.+26     	; 0x260a <modf+0x4c>
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	44 1f       	adc	r20, r20
    25f6:	b3 95       	inc	r27
    25f8:	da f3       	brmi	.-10     	; 0x25f0 <modf+0x32>
    25fa:	0d d0       	rcall	.+26     	; 0x2616 <modf+0x58>
    25fc:	a5 cc       	rjmp	.-1718   	; 0x1f48 <__subsf3>
    25fe:	61 30       	cpi	r22, 0x01	; 1
    2600:	71 05       	cpc	r23, r1
    2602:	a0 e8       	ldi	r26, 0x80	; 128
    2604:	8a 07       	cpc	r24, r26
    2606:	b9 46       	sbci	r27, 0x69	; 105
    2608:	30 f4       	brcc	.+12     	; 0x2616 <modf+0x58>
    260a:	9b 01       	movw	r18, r22
    260c:	ac 01       	movw	r20, r24
    260e:	66 27       	eor	r22, r22
    2610:	77 27       	eor	r23, r23
    2612:	88 27       	eor	r24, r24
    2614:	90 78       	andi	r25, 0x80	; 128
    2616:	30 96       	adiw	r30, 0x00	; 0
    2618:	21 f0       	breq	.+8      	; 0x2622 <modf+0x64>
    261a:	20 83       	st	Z, r18
    261c:	31 83       	std	Z+1, r19	; 0x01
    261e:	42 83       	std	Z+2, r20	; 0x02
    2620:	53 83       	std	Z+3, r21	; 0x03
    2622:	08 95       	ret

00002624 <__fp_mpack>:
    2624:	9f 3f       	cpi	r25, 0xFF	; 255
    2626:	49 f0       	breq	.+18     	; 0x263a <__fp_mpack+0x16>
    2628:	91 50       	subi	r25, 0x01	; 1
    262a:	28 f4       	brcc	.+10     	; 0x2636 <__fp_mpack+0x12>
    262c:	86 95       	lsr	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	b7 95       	ror	r27
    2634:	9f 5f       	subi	r25, 0xFF	; 255
    2636:	80 38       	cpi	r24, 0x80	; 128
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	88 0f       	add	r24, r24
    263c:	96 95       	lsr	r25
    263e:	87 95       	ror	r24
    2640:	97 f9       	bld	r25, 7
    2642:	08 95       	ret

00002644 <__mulsi3>:
    2644:	62 9f       	mul	r22, r18
    2646:	d0 01       	movw	r26, r0
    2648:	73 9f       	mul	r23, r19
    264a:	f0 01       	movw	r30, r0
    264c:	82 9f       	mul	r24, r18
    264e:	e0 0d       	add	r30, r0
    2650:	f1 1d       	adc	r31, r1
    2652:	64 9f       	mul	r22, r20
    2654:	e0 0d       	add	r30, r0
    2656:	f1 1d       	adc	r31, r1
    2658:	92 9f       	mul	r25, r18
    265a:	f0 0d       	add	r31, r0
    265c:	83 9f       	mul	r24, r19
    265e:	f0 0d       	add	r31, r0
    2660:	74 9f       	mul	r23, r20
    2662:	f0 0d       	add	r31, r0
    2664:	65 9f       	mul	r22, r21
    2666:	f0 0d       	add	r31, r0
    2668:	99 27       	eor	r25, r25
    266a:	72 9f       	mul	r23, r18
    266c:	b0 0d       	add	r27, r0
    266e:	e1 1d       	adc	r30, r1
    2670:	f9 1f       	adc	r31, r25
    2672:	63 9f       	mul	r22, r19
    2674:	b0 0d       	add	r27, r0
    2676:	e1 1d       	adc	r30, r1
    2678:	f9 1f       	adc	r31, r25
    267a:	bd 01       	movw	r22, r26
    267c:	cf 01       	movw	r24, r30
    267e:	11 24       	eor	r1, r1
    2680:	08 95       	ret

00002682 <__udivmodqi4>:
    2682:	99 1b       	sub	r25, r25
    2684:	79 e0       	ldi	r23, 0x09	; 9
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <__udivmodqi4_ep>

00002688 <__udivmodqi4_loop>:
    2688:	99 1f       	adc	r25, r25
    268a:	96 17       	cp	r25, r22
    268c:	08 f0       	brcs	.+2      	; 0x2690 <__udivmodqi4_ep>
    268e:	96 1b       	sub	r25, r22

00002690 <__udivmodqi4_ep>:
    2690:	88 1f       	adc	r24, r24
    2692:	7a 95       	dec	r23
    2694:	c9 f7       	brne	.-14     	; 0x2688 <__udivmodqi4_loop>
    2696:	80 95       	com	r24
    2698:	08 95       	ret

0000269a <__divmodhi4>:
    269a:	97 fb       	bst	r25, 7
    269c:	09 2e       	mov	r0, r25
    269e:	07 26       	eor	r0, r23
    26a0:	0a d0       	rcall	.+20     	; 0x26b6 <__divmodhi4_neg1>
    26a2:	77 fd       	sbrc	r23, 7
    26a4:	04 d0       	rcall	.+8      	; 0x26ae <__divmodhi4_neg2>
    26a6:	49 d0       	rcall	.+146    	; 0x273a <__udivmodhi4>
    26a8:	06 d0       	rcall	.+12     	; 0x26b6 <__divmodhi4_neg1>
    26aa:	00 20       	and	r0, r0
    26ac:	1a f4       	brpl	.+6      	; 0x26b4 <__divmodhi4_exit>

000026ae <__divmodhi4_neg2>:
    26ae:	70 95       	com	r23
    26b0:	61 95       	neg	r22
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255

000026b4 <__divmodhi4_exit>:
    26b4:	08 95       	ret

000026b6 <__divmodhi4_neg1>:
    26b6:	f6 f7       	brtc	.-4      	; 0x26b4 <__divmodhi4_exit>
    26b8:	90 95       	com	r25
    26ba:	81 95       	neg	r24
    26bc:	9f 4f       	sbci	r25, 0xFF	; 255
    26be:	08 95       	ret

000026c0 <__udivmodsi4>:
    26c0:	a1 e2       	ldi	r26, 0x21	; 33
    26c2:	1a 2e       	mov	r1, r26
    26c4:	aa 1b       	sub	r26, r26
    26c6:	bb 1b       	sub	r27, r27
    26c8:	fd 01       	movw	r30, r26
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <__udivmodsi4_ep>

000026cc <__udivmodsi4_loop>:
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	ee 1f       	adc	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	a2 17       	cp	r26, r18
    26d6:	b3 07       	cpc	r27, r19
    26d8:	e4 07       	cpc	r30, r20
    26da:	f5 07       	cpc	r31, r21
    26dc:	20 f0       	brcs	.+8      	; 0x26e6 <__udivmodsi4_ep>
    26de:	a2 1b       	sub	r26, r18
    26e0:	b3 0b       	sbc	r27, r19
    26e2:	e4 0b       	sbc	r30, r20
    26e4:	f5 0b       	sbc	r31, r21

000026e6 <__udivmodsi4_ep>:
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	1a 94       	dec	r1
    26f0:	69 f7       	brne	.-38     	; 0x26cc <__udivmodsi4_loop>
    26f2:	60 95       	com	r22
    26f4:	70 95       	com	r23
    26f6:	80 95       	com	r24
    26f8:	90 95       	com	r25
    26fa:	9b 01       	movw	r18, r22
    26fc:	ac 01       	movw	r20, r24
    26fe:	bd 01       	movw	r22, r26
    2700:	cf 01       	movw	r24, r30
    2702:	08 95       	ret

00002704 <__divmodsi4>:
    2704:	97 fb       	bst	r25, 7
    2706:	09 2e       	mov	r0, r25
    2708:	05 26       	eor	r0, r21
    270a:	0e d0       	rcall	.+28     	; 0x2728 <__divmodsi4_neg1>
    270c:	57 fd       	sbrc	r21, 7
    270e:	04 d0       	rcall	.+8      	; 0x2718 <__divmodsi4_neg2>
    2710:	d7 df       	rcall	.-82     	; 0x26c0 <__udivmodsi4>
    2712:	0a d0       	rcall	.+20     	; 0x2728 <__divmodsi4_neg1>
    2714:	00 1c       	adc	r0, r0
    2716:	38 f4       	brcc	.+14     	; 0x2726 <__divmodsi4_exit>

00002718 <__divmodsi4_neg2>:
    2718:	50 95       	com	r21
    271a:	40 95       	com	r20
    271c:	30 95       	com	r19
    271e:	21 95       	neg	r18
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	4f 4f       	sbci	r20, 0xFF	; 255
    2724:	5f 4f       	sbci	r21, 0xFF	; 255

00002726 <__divmodsi4_exit>:
    2726:	08 95       	ret

00002728 <__divmodsi4_neg1>:
    2728:	f6 f7       	brtc	.-4      	; 0x2726 <__divmodsi4_exit>
    272a:	90 95       	com	r25
    272c:	80 95       	com	r24
    272e:	70 95       	com	r23
    2730:	61 95       	neg	r22
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	8f 4f       	sbci	r24, 0xFF	; 255
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	08 95       	ret

0000273a <__udivmodhi4>:
    273a:	aa 1b       	sub	r26, r26
    273c:	bb 1b       	sub	r27, r27
    273e:	51 e1       	ldi	r21, 0x11	; 17
    2740:	07 c0       	rjmp	.+14     	; 0x2750 <__udivmodhi4_ep>

00002742 <__udivmodhi4_loop>:
    2742:	aa 1f       	adc	r26, r26
    2744:	bb 1f       	adc	r27, r27
    2746:	a6 17       	cp	r26, r22
    2748:	b7 07       	cpc	r27, r23
    274a:	10 f0       	brcs	.+4      	; 0x2750 <__udivmodhi4_ep>
    274c:	a6 1b       	sub	r26, r22
    274e:	b7 0b       	sbc	r27, r23

00002750 <__udivmodhi4_ep>:
    2750:	88 1f       	adc	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	5a 95       	dec	r21
    2756:	a9 f7       	brne	.-22     	; 0x2742 <__udivmodhi4_loop>
    2758:	80 95       	com	r24
    275a:	90 95       	com	r25
    275c:	bc 01       	movw	r22, r24
    275e:	cd 01       	movw	r24, r26
    2760:	08 95       	ret

00002762 <__tablejump2__>:
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31

00002766 <__tablejump__>:
    2766:	05 90       	lpm	r0, Z+
    2768:	f4 91       	lpm	r31, Z+
    276a:	e0 2d       	mov	r30, r0
    276c:	09 94       	ijmp

0000276e <_exit>:
    276e:	f8 94       	cli

00002770 <__stop_program>:
    2770:	ff cf       	rjmp	.-2      	; 0x2770 <__stop_program>
